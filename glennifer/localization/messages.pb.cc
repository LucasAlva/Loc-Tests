// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DepositionStateDetailed_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DepositionStateSummary_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExcavationStateDetailed_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExcavationStateSummary_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LocalizationPosition_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LocomotionStateDetailed_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LocomotionStateSummary_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ObstaclePosition_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UnixTime_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Fault_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LocObsStateDetailed_messages_2eproto;
namespace com {
namespace cwrubotix {
namespace glennifer {
class UnixTimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnixTime> _instance;
} _UnixTime_default_instance_;
class RpmUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RpmUpdate> _instance;
} _RpmUpdate_default_instance_;
class DisplacementUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DisplacementUpdate> _instance;
} _DisplacementUpdate_default_instance_;
class PositionUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PositionUpdate> _instance;
} _PositionUpdate_default_instance_;
class CurrentUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CurrentUpdate> _instance;
} _CurrentUpdate_default_instance_;
class LimitUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LimitUpdate> _instance;
} _LimitUpdate_default_instance_;
class ImuUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImuUpdate> _instance;
} _ImuUpdate_default_instance_;
class LoadUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoadUpdate> _instance;
} _LoadUpdate_default_instance_;
class CountUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CountUpdate> _instance;
} _CountUpdate_default_instance_;
class FaultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Fault> _instance;
} _Fault_default_instance_;
class AdjustmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Adjustment> _instance;
} _Adjustment_default_instance_;
class SpeedControlCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedControlCommand> _instance;
} _SpeedControlCommand_default_instance_;
class AllWheelsCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllWheelsCommand> _instance;
} _AllWheelsCommand_default_instance_;
class ClosedLoopCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClosedLoopCommand> _instance;
} _ClosedLoopCommand_default_instance_;
class PositionControlCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PositionControlCommand> _instance;
} _PositionControlCommand_default_instance_;
class TurnControlCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TurnControlCommand> _instance;
} _TurnControlCommand_default_instance_;
class StopAllCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopAllCommand> _instance;
} _StopAllCommand_default_instance_;
class LocomotionControlCommandStraightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocomotionControlCommandStraight> _instance;
} _LocomotionControlCommandStraight_default_instance_;
class ExcavationControlCommandDigDeepDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExcavationControlCommandDigDeep> _instance;
} _ExcavationControlCommandDigDeep_default_instance_;
class ExcavationControlCommandDigEndDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExcavationControlCommandDigEnd> _instance;
} _ExcavationControlCommandDigEnd_default_instance_;
class StateSubscribeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StateSubscribe> _instance;
} _StateSubscribe_default_instance_;
class StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<State> _instance;
} _State_default_instance_;
class LocomotionStateSummaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocomotionStateSummary> _instance;
} _LocomotionStateSummary_default_instance_;
class LocomotionStateDetailedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocomotionStateDetailed> _instance;
} _LocomotionStateDetailed_default_instance_;
class ExcavationStateSummaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExcavationStateSummary> _instance;
} _ExcavationStateSummary_default_instance_;
class ExcavationStateDetailedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExcavationStateDetailed> _instance;
} _ExcavationStateDetailed_default_instance_;
class DepositionStateSummaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DepositionStateSummary> _instance;
} _DepositionStateSummary_default_instance_;
class DepositionStateDetailedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DepositionStateDetailed> _instance;
} _DepositionStateDetailed_default_instance_;
class LocObsStateDetailedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocObsStateDetailed> _instance;
} _LocObsStateDetailed_default_instance_;
class LocalizationPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocalizationPosition> _instance;
} _LocalizationPosition_default_instance_;
class ObstaclePositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObstaclePosition> _instance;
} _ObstaclePosition_default_instance_;
class LaunchTransitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchTransit> _instance;
} _LaunchTransit_default_instance_;
class LaunchDrillDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchDrill> _instance;
} _LaunchDrill_default_instance_;
class LaunchDumpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchDump> _instance;
} _LaunchDump_default_instance_;
class ProgressReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProgressReport> _instance;
} _ProgressReport_default_instance_;
class ErrorReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ErrorReport> _instance;
} _ErrorReport_default_instance_;
class TransitSoftStopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransitSoftStop> _instance;
} _TransitSoftStop_default_instance_;
class DrillSoftStopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DrillSoftStop> _instance;
} _DrillSoftStop_default_instance_;
class DumpSoftStopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DumpSoftStop> _instance;
} _DumpSoftStop_default_instance_;
class TransitHardStopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransitHardStop> _instance;
} _TransitHardStop_default_instance_;
class DrillHardStopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DrillHardStop> _instance;
} _DrillHardStop_default_instance_;
class DumpHardStopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DumpHardStop> _instance;
} _DumpHardStop_default_instance_;
class TransitNewObstacleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransitNewObstacle> _instance;
} _TransitNewObstacle_default_instance_;
class AutonomyNextHeadingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AutonomyNextHeading> _instance;
} _AutonomyNextHeading_default_instance_;
}  // namespace glennifer
}  // namespace cwrubotix
}  // namespace com
static void InitDefaultsUnixTime_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_UnixTime_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::UnixTime();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::UnixTime::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UnixTime_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnixTime_messages_2eproto}, {}};

static void InitDefaultsRpmUpdate_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_RpmUpdate_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::RpmUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::RpmUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RpmUpdate_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRpmUpdate_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsDisplacementUpdate_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_DisplacementUpdate_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::DisplacementUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::DisplacementUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DisplacementUpdate_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDisplacementUpdate_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsPositionUpdate_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_PositionUpdate_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::PositionUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::PositionUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PositionUpdate_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPositionUpdate_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsCurrentUpdate_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_CurrentUpdate_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::CurrentUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::CurrentUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CurrentUpdate_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCurrentUpdate_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsLimitUpdate_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_LimitUpdate_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::LimitUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::LimitUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LimitUpdate_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLimitUpdate_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsImuUpdate_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_ImuUpdate_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::ImuUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::ImuUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ImuUpdate_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsImuUpdate_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsLoadUpdate_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_LoadUpdate_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::LoadUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::LoadUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LoadUpdate_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLoadUpdate_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsCountUpdate_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_CountUpdate_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::CountUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::CountUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CountUpdate_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCountUpdate_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsFault_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_Fault_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::Fault();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::Fault::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Fault_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFault_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsAdjustment_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_Adjustment_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::Adjustment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::Adjustment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Adjustment_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAdjustment_messages_2eproto}, {
      &scc_info_Fault_messages_2eproto.base,
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsSpeedControlCommand_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_SpeedControlCommand_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::SpeedControlCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::SpeedControlCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpeedControlCommand_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpeedControlCommand_messages_2eproto}, {}};

static void InitDefaultsAllWheelsCommand_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_AllWheelsCommand_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::AllWheelsCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::AllWheelsCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AllWheelsCommand_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAllWheelsCommand_messages_2eproto}, {}};

static void InitDefaultsClosedLoopCommand_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_ClosedLoopCommand_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::ClosedLoopCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::ClosedLoopCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ClosedLoopCommand_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsClosedLoopCommand_messages_2eproto}, {}};

static void InitDefaultsPositionControlCommand_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_PositionControlCommand_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::PositionControlCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::PositionControlCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PositionControlCommand_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPositionControlCommand_messages_2eproto}, {}};

static void InitDefaultsTurnControlCommand_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_TurnControlCommand_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::TurnControlCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::TurnControlCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TurnControlCommand_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTurnControlCommand_messages_2eproto}, {}};

static void InitDefaultsStopAllCommand_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_StopAllCommand_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::StopAllCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::StopAllCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StopAllCommand_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStopAllCommand_messages_2eproto}, {}};

static void InitDefaultsLocomotionControlCommandStraight_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_LocomotionControlCommandStraight_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::LocomotionControlCommandStraight();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::LocomotionControlCommandStraight::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LocomotionControlCommandStraight_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLocomotionControlCommandStraight_messages_2eproto}, {}};

static void InitDefaultsExcavationControlCommandDigDeep_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_ExcavationControlCommandDigDeep_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::ExcavationControlCommandDigDeep();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::ExcavationControlCommandDigDeep::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExcavationControlCommandDigDeep_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExcavationControlCommandDigDeep_messages_2eproto}, {}};

static void InitDefaultsExcavationControlCommandDigEnd_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_ExcavationControlCommandDigEnd_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::ExcavationControlCommandDigEnd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::ExcavationControlCommandDigEnd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExcavationControlCommandDigEnd_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExcavationControlCommandDigEnd_messages_2eproto}, {}};

static void InitDefaultsStateSubscribe_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_StateSubscribe_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::StateSubscribe();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::StateSubscribe::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StateSubscribe_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStateSubscribe_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsState_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_State_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::State::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_State_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsState_messages_2eproto}, {
      &scc_info_LocomotionStateSummary_messages_2eproto.base,
      &scc_info_LocomotionStateDetailed_messages_2eproto.base,
      &scc_info_ExcavationStateSummary_messages_2eproto.base,
      &scc_info_ExcavationStateDetailed_messages_2eproto.base,
      &scc_info_DepositionStateSummary_messages_2eproto.base,
      &scc_info_DepositionStateDetailed_messages_2eproto.base,
      &scc_info_LocObsStateDetailed_messages_2eproto.base,
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsLocomotionStateSummary_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_LocomotionStateSummary_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::LocomotionStateSummary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::LocomotionStateSummary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LocomotionStateSummary_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLocomotionStateSummary_messages_2eproto}, {}};

static void InitDefaultsLocomotionStateDetailed_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_LocomotionStateDetailed_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::LocomotionStateDetailed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::LocomotionStateDetailed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LocomotionStateDetailed_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLocomotionStateDetailed_messages_2eproto}, {}};

static void InitDefaultsExcavationStateSummary_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_ExcavationStateSummary_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::ExcavationStateSummary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::ExcavationStateSummary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExcavationStateSummary_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExcavationStateSummary_messages_2eproto}, {}};

static void InitDefaultsExcavationStateDetailed_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_ExcavationStateDetailed_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::ExcavationStateDetailed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::ExcavationStateDetailed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExcavationStateDetailed_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExcavationStateDetailed_messages_2eproto}, {}};

static void InitDefaultsDepositionStateSummary_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_DepositionStateSummary_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::DepositionStateSummary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::DepositionStateSummary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DepositionStateSummary_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDepositionStateSummary_messages_2eproto}, {}};

static void InitDefaultsDepositionStateDetailed_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_DepositionStateDetailed_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::DepositionStateDetailed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::DepositionStateDetailed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DepositionStateDetailed_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDepositionStateDetailed_messages_2eproto}, {}};

static void InitDefaultsLocObsStateDetailed_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_LocObsStateDetailed_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::LocObsStateDetailed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::LocObsStateDetailed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LocObsStateDetailed_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLocObsStateDetailed_messages_2eproto}, {
      &scc_info_LocalizationPosition_messages_2eproto.base,
      &scc_info_ObstaclePosition_messages_2eproto.base,}};

static void InitDefaultsLocalizationPosition_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_LocalizationPosition_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::LocalizationPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::LocalizationPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LocalizationPosition_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLocalizationPosition_messages_2eproto}, {}};

static void InitDefaultsObstaclePosition_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_ObstaclePosition_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::ObstaclePosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::ObstaclePosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ObstaclePosition_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObstaclePosition_messages_2eproto}, {}};

static void InitDefaultsLaunchTransit_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_LaunchTransit_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::LaunchTransit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::LaunchTransit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaunchTransit_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaunchTransit_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsLaunchDrill_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_LaunchDrill_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::LaunchDrill();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::LaunchDrill::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaunchDrill_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaunchDrill_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsLaunchDump_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_LaunchDump_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::LaunchDump();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::LaunchDump::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaunchDump_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaunchDump_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsProgressReport_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_ProgressReport_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::ProgressReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::ProgressReport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProgressReport_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProgressReport_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsErrorReport_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_ErrorReport_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::ErrorReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::ErrorReport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ErrorReport_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsErrorReport_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsTransitSoftStop_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_TransitSoftStop_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::TransitSoftStop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::TransitSoftStop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TransitSoftStop_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTransitSoftStop_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsDrillSoftStop_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_DrillSoftStop_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::DrillSoftStop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::DrillSoftStop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DrillSoftStop_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDrillSoftStop_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsDumpSoftStop_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_DumpSoftStop_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::DumpSoftStop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::DumpSoftStop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DumpSoftStop_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDumpSoftStop_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsTransitHardStop_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_TransitHardStop_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::TransitHardStop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::TransitHardStop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TransitHardStop_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTransitHardStop_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsDrillHardStop_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_DrillHardStop_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::DrillHardStop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::DrillHardStop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DrillHardStop_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDrillHardStop_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsDumpHardStop_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_DumpHardStop_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::DumpHardStop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::DumpHardStop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DumpHardStop_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDumpHardStop_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsTransitNewObstacle_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_TransitNewObstacle_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::TransitNewObstacle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::TransitNewObstacle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TransitNewObstacle_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTransitNewObstacle_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

static void InitDefaultsAutonomyNextHeading_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::cwrubotix::glennifer::_AutonomyNextHeading_default_instance_;
    new (ptr) ::com::cwrubotix::glennifer::AutonomyNextHeading();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::cwrubotix::glennifer::AutonomyNextHeading::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AutonomyNextHeading_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAutonomyNextHeading_messages_2eproto}, {
      &scc_info_UnixTime_messages_2eproto.base,}};

void InitDefaults_messages_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_UnixTime_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RpmUpdate_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DisplacementUpdate_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PositionUpdate_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CurrentUpdate_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LimitUpdate_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ImuUpdate_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoadUpdate_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CountUpdate_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Fault_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Adjustment_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeedControlCommand_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AllWheelsCommand_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClosedLoopCommand_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PositionControlCommand_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TurnControlCommand_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopAllCommand_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocomotionControlCommandStraight_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExcavationControlCommandDigDeep_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExcavationControlCommandDigEnd_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StateSubscribe_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_State_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocomotionStateSummary_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocomotionStateDetailed_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExcavationStateSummary_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExcavationStateDetailed_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DepositionStateSummary_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DepositionStateDetailed_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocObsStateDetailed_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocalizationPosition_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObstaclePosition_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaunchTransit_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaunchDrill_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaunchDump_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProgressReport_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ErrorReport_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransitSoftStop_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DrillSoftStop_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DumpSoftStop_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransitHardStop_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DrillHardStop_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DumpHardStop_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransitNewObstacle_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AutonomyNextHeading_messages_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_messages_2eproto[44];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_messages_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_messages_2eproto::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::UnixTime, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::UnixTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::UnixTime, time_int_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::UnixTime, time_frac_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::RpmUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::RpmUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::RpmUpdate, rpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::RpmUpdate, timestamp_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DisplacementUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DisplacementUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DisplacementUpdate, displacement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DisplacementUpdate, timestamp_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::PositionUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::PositionUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::PositionUpdate, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::PositionUpdate, timestamp_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::CurrentUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::CurrentUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::CurrentUpdate, current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::CurrentUpdate, timestamp_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LimitUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LimitUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LimitUpdate, pressed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LimitUpdate, timestamp_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ImuUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ImuUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ImuUpdate, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ImuUpdate, timestamp_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LoadUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LoadUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LoadUpdate, load_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LoadUpdate, timestamp_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::CountUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::CountUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::CountUpdate, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::CountUpdate, timestamp_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::Fault, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::Fault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::Fault, fault_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::Fault, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::Fault, params_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::Adjustment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::Adjustment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::Adjustment, source_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::Adjustment, adjustment_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::Adjustment, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::Adjustment, params_),
  0,
  2,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::SpeedControlCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::SpeedControlCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::SpeedControlCommand, rpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::SpeedControlCommand, timeout_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::AllWheelsCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::AllWheelsCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::AllWheelsCommand, front_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::AllWheelsCommand, front_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::AllWheelsCommand, back_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::AllWheelsCommand, back_right_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ClosedLoopCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ClosedLoopCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ClosedLoopCommand, closed_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::PositionControlCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::PositionControlCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::PositionControlCommand, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::PositionControlCommand, timeout_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::TurnControlCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::TurnControlCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::TurnControlCommand, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::TurnControlCommand, curvature_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::StopAllCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::StopAllCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::StopAllCommand, stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::StopAllCommand, timeout_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocomotionControlCommandStraight, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocomotionControlCommandStraight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocomotionControlCommandStraight, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocomotionControlCommandStraight, timeout_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationControlCommandDigDeep, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationControlCommandDigDeep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationControlCommandDigDeep, depth_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationControlCommandDigEnd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationControlCommandDigEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::StateSubscribe, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::StateSubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::StateSubscribe, replykey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::StateSubscribe, interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::StateSubscribe, locomotion_summary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::StateSubscribe, locomotion_detailed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::StateSubscribe, excavation_summary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::StateSubscribe, excavation_detailed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::StateSubscribe, deposition_summary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::StateSubscribe, deposition_detailed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::StateSubscribe, loc_obs_detailed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::StateSubscribe, starttime_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::State, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::State, loc_summary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::State, loc_detailed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::State, exc_summary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::State, exc_detailed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::State, dep_summary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::State, dep_detailed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::State, loc_obs_detailed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::State, timestamp_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocomotionStateSummary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocomotionStateSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocomotionStateSummary, speed_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocomotionStateDetailed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocomotionStateDetailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocomotionStateDetailed, front_left_rpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocomotionStateDetailed, front_right_rpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocomotionStateDetailed, back_left_rpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocomotionStateDetailed, back_right_rpm_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateSummary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateSummary, rpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateSummary, displacement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateSummary, arm_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateSummary, current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateSummary, arm_extended_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateSummary, translation_extended_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateSummary, translation_retracted_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateDetailed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateDetailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateDetailed, rpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateDetailed, displacement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateDetailed, arm_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateDetailed, current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateDetailed, arm_left_extended_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateDetailed, arm_right_extended_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateDetailed, translation_left_extended_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateDetailed, translation_right_extended_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ExcavationStateDetailed, translation_retracted_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DepositionStateSummary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DepositionStateSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DepositionStateSummary, load_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DepositionStateSummary, dump_extended_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DepositionStateSummary, dump_retracted_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DepositionStateDetailed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DepositionStateDetailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DepositionStateDetailed, left_load_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DepositionStateDetailed, right_load_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DepositionStateDetailed, dump_left_extended_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DepositionStateDetailed, dump_right_extended_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DepositionStateDetailed, dump_left_retracted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DepositionStateDetailed, dump_right_retracted_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocObsStateDetailed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocObsStateDetailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocObsStateDetailed, loc_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocObsStateDetailed, obstacles_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocalizationPosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocalizationPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocalizationPosition, x_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocalizationPosition, y_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LocalizationPosition, bearing_angle_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ObstaclePosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ObstaclePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ObstaclePosition, x_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ObstaclePosition, y_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ObstaclePosition, z_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ObstaclePosition, diameter_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchTransit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchTransit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchTransit, cur_x_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchTransit, cur_y_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchTransit, cur_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchTransit, dest_x_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchTransit, dest_y_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchTransit, time_alloc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchTransit, timestamp_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchDrill, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchDrill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchDrill, current_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchDrill, current_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchDrill, current_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchDrill, load_desired_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchDrill, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchDrill, time_allocation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchDrill, timestamp_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchDump, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchDump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchDump, current_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchDump, current_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchDump, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchDump, time_allocation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::LaunchDump, timestamp_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ProgressReport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ProgressReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ProgressReport, done_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ProgressReport, timestamp_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ErrorReport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ErrorReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ErrorReport, resolved_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::ErrorReport, timestamp_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::TransitSoftStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::TransitSoftStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::TransitSoftStop, timeleft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::TransitSoftStop, stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::TransitSoftStop, timestamp_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DrillSoftStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DrillSoftStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DrillSoftStop, timeleft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DrillSoftStop, stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DrillSoftStop, timestamp_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DumpSoftStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DumpSoftStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DumpSoftStop, timeleft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DumpSoftStop, stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DumpSoftStop, timestamp_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::TransitHardStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::TransitHardStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::TransitHardStop, stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::TransitHardStop, timestamp_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DrillHardStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DrillHardStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DrillHardStop, stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DrillHardStop, timestamp_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DumpHardStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DumpHardStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DumpHardStop, stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::DumpHardStop, timestamp_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::TransitNewObstacle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::TransitNewObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::TransitNewObstacle, x_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::TransitNewObstacle, y_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::TransitNewObstacle, diameter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::TransitNewObstacle, timestamp_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::AutonomyNextHeading, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::AutonomyNextHeading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::AutonomyNextHeading, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::com::cwrubotix::glennifer::AutonomyNextHeading, timestamp_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::com::cwrubotix::glennifer::UnixTime)},
  { 9, 16, sizeof(::com::cwrubotix::glennifer::RpmUpdate)},
  { 18, 25, sizeof(::com::cwrubotix::glennifer::DisplacementUpdate)},
  { 27, 34, sizeof(::com::cwrubotix::glennifer::PositionUpdate)},
  { 36, 43, sizeof(::com::cwrubotix::glennifer::CurrentUpdate)},
  { 45, 52, sizeof(::com::cwrubotix::glennifer::LimitUpdate)},
  { 54, 61, sizeof(::com::cwrubotix::glennifer::ImuUpdate)},
  { 63, 70, sizeof(::com::cwrubotix::glennifer::LoadUpdate)},
  { 72, 79, sizeof(::com::cwrubotix::glennifer::CountUpdate)},
  { 81, 89, sizeof(::com::cwrubotix::glennifer::Fault)},
  { 92, 101, sizeof(::com::cwrubotix::glennifer::Adjustment)},
  { 105, 112, sizeof(::com::cwrubotix::glennifer::SpeedControlCommand)},
  { 114, 123, sizeof(::com::cwrubotix::glennifer::AllWheelsCommand)},
  { 127, 133, sizeof(::com::cwrubotix::glennifer::ClosedLoopCommand)},
  { 134, 141, sizeof(::com::cwrubotix::glennifer::PositionControlCommand)},
  { 143, 150, sizeof(::com::cwrubotix::glennifer::TurnControlCommand)},
  { 152, 159, sizeof(::com::cwrubotix::glennifer::StopAllCommand)},
  { 161, 168, sizeof(::com::cwrubotix::glennifer::LocomotionControlCommandStraight)},
  { 170, 176, sizeof(::com::cwrubotix::glennifer::ExcavationControlCommandDigDeep)},
  { 177, 182, sizeof(::com::cwrubotix::glennifer::ExcavationControlCommandDigEnd)},
  { 182, 197, sizeof(::com::cwrubotix::glennifer::StateSubscribe)},
  { 207, 220, sizeof(::com::cwrubotix::glennifer::State)},
  { 228, 234, sizeof(::com::cwrubotix::glennifer::LocomotionStateSummary)},
  { 235, 244, sizeof(::com::cwrubotix::glennifer::LocomotionStateDetailed)},
  { 248, 260, sizeof(::com::cwrubotix::glennifer::ExcavationStateSummary)},
  { 267, 281, sizeof(::com::cwrubotix::glennifer::ExcavationStateDetailed)},
  { 290, 298, sizeof(::com::cwrubotix::glennifer::DepositionStateSummary)},
  { 301, 312, sizeof(::com::cwrubotix::glennifer::DepositionStateDetailed)},
  { 318, 325, sizeof(::com::cwrubotix::glennifer::LocObsStateDetailed)},
  { 327, 335, sizeof(::com::cwrubotix::glennifer::LocalizationPosition)},
  { 338, 347, sizeof(::com::cwrubotix::glennifer::ObstaclePosition)},
  { 351, 363, sizeof(::com::cwrubotix::glennifer::LaunchTransit)},
  { 370, 382, sizeof(::com::cwrubotix::glennifer::LaunchDrill)},
  { 389, 399, sizeof(::com::cwrubotix::glennifer::LaunchDump)},
  { 404, 411, sizeof(::com::cwrubotix::glennifer::ProgressReport)},
  { 413, 420, sizeof(::com::cwrubotix::glennifer::ErrorReport)},
  { 422, 430, sizeof(::com::cwrubotix::glennifer::TransitSoftStop)},
  { 433, 441, sizeof(::com::cwrubotix::glennifer::DrillSoftStop)},
  { 444, 452, sizeof(::com::cwrubotix::glennifer::DumpSoftStop)},
  { 455, 462, sizeof(::com::cwrubotix::glennifer::TransitHardStop)},
  { 464, 471, sizeof(::com::cwrubotix::glennifer::DrillHardStop)},
  { 473, 480, sizeof(::com::cwrubotix::glennifer::DumpHardStop)},
  { 482, 491, sizeof(::com::cwrubotix::glennifer::TransitNewObstacle)},
  { 495, 502, sizeof(::com::cwrubotix::glennifer::AutonomyNextHeading)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_UnixTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_RpmUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_DisplacementUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_PositionUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_CurrentUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_LimitUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_ImuUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_LoadUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_CountUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_Fault_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_Adjustment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_SpeedControlCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_AllWheelsCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_ClosedLoopCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_PositionControlCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_TurnControlCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_StopAllCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_LocomotionControlCommandStraight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_ExcavationControlCommandDigDeep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_ExcavationControlCommandDigEnd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_StateSubscribe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_LocomotionStateSummary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_LocomotionStateDetailed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_ExcavationStateSummary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_ExcavationStateDetailed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_DepositionStateSummary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_DepositionStateDetailed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_LocObsStateDetailed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_LocalizationPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_ObstaclePosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_LaunchTransit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_LaunchDrill_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_LaunchDump_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_ProgressReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_ErrorReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_TransitSoftStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_DrillSoftStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_DumpSoftStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_TransitHardStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_DrillHardStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_DumpHardStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_TransitNewObstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::cwrubotix::glennifer::_AutonomyNextHeading_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_messages_2eproto = {
  {}, AddDescriptors_messages_2eproto, "messages.proto", schemas,
  file_default_instances, TableStruct_messages_2eproto::offsets,
  file_level_metadata_messages_2eproto, 44, file_level_enum_descriptors_messages_2eproto, file_level_service_descriptors_messages_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_messages_2eproto = {
  false, InitDefaults_messages_2eproto, 
  "\n\016messages.proto\022\027com.cwrubotix.glennife"
  "r\"/\n\010UnixTime\022\020\n\010time_int\030\001 \002(\004\022\021\n\ttime_"
  "frac\030\002 \002(\002\"N\n\tRpmUpdate\022\013\n\003rpm\030\001 \002(\002\0224\n\t"
  "timestamp\030\002 \002(\0132!.com.cwrubotix.glennife"
  "r.UnixTime\"`\n\022DisplacementUpdate\022\024\n\014disp"
  "lacement\030\001 \002(\002\0224\n\ttimestamp\030\002 \002(\0132!.com."
  "cwrubotix.glennifer.UnixTime\"X\n\016Position"
  "Update\022\020\n\010position\030\001 \002(\002\0224\n\ttimestamp\030\002 "
  "\002(\0132!.com.cwrubotix.glennifer.UnixTime\"V"
  "\n\rCurrentUpdate\022\017\n\007current\030\001 \002(\002\0224\n\ttime"
  "stamp\030\002 \002(\0132!.com.cwrubotix.glennifer.Un"
  "ixTime\"T\n\013LimitUpdate\022\017\n\007pressed\030\001 \002(\010\0224"
  "\n\ttimestamp\030\002 \002(\0132!.com.cwrubotix.glenni"
  "fer.UnixTime\"V\n\tImuUpdate\022\023\n\013orientation"
  "\030\001 \002(\002\0224\n\ttimestamp\030\002 \002(\0132!.com.cwruboti"
  "x.glennifer.UnixTime\"P\n\nLoadUpdate\022\014\n\004lo"
  "ad\030\001 \002(\002\0224\n\ttimestamp\030\002 \002(\0132!.com.cwrubo"
  "tix.glennifer.UnixTime\"R\n\013CountUpdate\022\r\n"
  "\005count\030\001 \002(\r\0224\n\ttimestamp\030\002 \002(\0132!.com.cw"
  "rubotix.glennifer.UnixTime\"a\n\005Fault\022\022\n\nf"
  "ault_code\030\001 \002(\r\0224\n\ttimestamp\030\002 \002(\0132!.com"
  ".cwrubotix.glennifer.UnixTime\022\016\n\006params\030"
  "\003 \003(\r\"\241\001\n\nAdjustment\0224\n\014source_fault\030\001 \001"
  "(\0132\036.com.cwrubotix.glennifer.Fault\022\027\n\017ad"
  "justment_code\030\002 \002(\r\0224\n\ttimestamp\030\003 \002(\0132!"
  ".com.cwrubotix.glennifer.UnixTime\022\016\n\006par"
  "ams\030\004 \003(\r\"3\n\023SpeedControlCommand\022\013\n\003rpm\030"
  "\001 \002(\002\022\017\n\007timeout\030\002 \002(\002\"b\n\020AllWheelsComma"
  "nd\022\022\n\nfront_left\030\001 \002(\002\022\023\n\013front_right\030\002 "
  "\002(\002\022\021\n\tback_left\030\003 \002(\002\022\022\n\nback_right\030\004 \002"
  "(\002\"#\n\021ClosedLoopCommand\022\016\n\006closed\030\001 \002(\010\""
  ";\n\026PositionControlCommand\022\020\n\010position\030\001 "
  "\002(\002\022\017\n\007timeout\030\002 \002(\002\"6\n\022TurnControlComma"
  "nd\022\r\n\005speed\030\001 \002(\002\022\021\n\tcurvature\030\002 \002(\002\"/\n\016"
  "StopAllCommand\022\014\n\004stop\030\001 \002(\010\022\017\n\007timeout\030"
  "\002 \002(\002\"B\n LocomotionControlCommandStraigh"
  "t\022\r\n\005speed\030\001 \002(\002\022\017\n\007timeout\030\002 \002(\002\"0\n\037Exc"
  "avationControlCommandDigDeep\022\r\n\005depth\030\001 "
  "\002(\002\" \n\036ExcavationControlCommandDigEnd\"\257\002"
  "\n\016StateSubscribe\022\020\n\010replyKey\030\001 \002(\t\022\020\n\010in"
  "terval\030\002 \002(\002\022\032\n\022locomotion_summary\030\003 \002(\010"
  "\022\033\n\023locomotion_detailed\030\004 \002(\010\022\032\n\022excavat"
  "ion_summary\030\005 \002(\010\022\033\n\023excavation_detailed"
  "\030\006 \002(\010\022\032\n\022deposition_summary\030\007 \002(\010\022\033\n\023de"
  "position_detailed\030\010 \002(\010\022\030\n\020loc_obs_detai"
  "led\030\t \002(\010\0224\n\tstartTime\030\n \001(\0132!.com.cwrub"
  "otix.glennifer.UnixTime\"\257\004\n\005State\022D\n\013loc"
  "_summary\030\001 \001(\0132/.com.cwrubotix.glennifer"
  ".LocomotionStateSummary\022F\n\014loc_detailed\030"
  "\002 \001(\01320.com.cwrubotix.glennifer.Locomoti"
  "onStateDetailed\022D\n\013exc_summary\030\003 \001(\0132/.c"
  "om.cwrubotix.glennifer.ExcavationStateSu"
  "mmary\022F\n\014exc_detailed\030\004 \001(\01320.com.cwrubo"
  "tix.glennifer.ExcavationStateDetailed\022D\n"
  "\013dep_summary\030\005 \001(\0132/.com.cwrubotix.glenn"
  "ifer.DepositionStateSummary\022F\n\014dep_detai"
  "led\030\006 \001(\01320.com.cwrubotix.glennifer.Depo"
  "sitionStateDetailed\022F\n\020loc_obs_detailed\030"
  "\007 \001(\0132,.com.cwrubotix.glennifer.LocObsSt"
  "ateDetailed\0224\n\ttimestamp\030\010 \002(\0132!.com.cwr"
  "ubotix.glennifer.UnixTime\"\'\n\026LocomotionS"
  "tateSummary\022\r\n\005speed\030\001 \002(\002\"y\n\027Locomotion"
  "StateDetailed\022\026\n\016front_left_rpm\030\001 \002(\002\022\027\n"
  "\017front_right_rpm\030\002 \002(\002\022\025\n\rback_left_rpm\030"
  "\003 \002(\002\022\026\n\016back_right_rpm\030\004 \002(\002\"\260\001\n\026Excava"
  "tionStateSummary\022\013\n\003rpm\030\001 \002(\002\022\024\n\014displac"
  "ement\030\002 \002(\002\022\017\n\007arm_pos\030\003 \002(\002\022\017\n\007current\030"
  "\004 \002(\002\022\024\n\014arm_extended\030\005 \002(\010\022\034\n\024translati"
  "on_extended\030\006 \002(\010\022\035\n\025translation_retract"
  "ed\030\007 \002(\010\"\373\001\n\027ExcavationStateDetailed\022\013\n\003"
  "rpm\030\001 \002(\002\022\024\n\014displacement\030\002 \002(\002\022\017\n\007arm_p"
  "os\030\003 \002(\002\022\017\n\007current\030\004 \002(\002\022\031\n\021arm_left_ex"
  "tended\030\005 \002(\010\022\032\n\022arm_right_extended\030\006 \002(\010"
  "\022!\n\031translation_left_extended\030\007 \002(\010\022\"\n\032t"
  "ranslation_right_extended\030\010 \002(\010\022\035\n\025trans"
  "lation_retracted\030\t \002(\010\"U\n\026DepositionStat"
  "eSummary\022\014\n\004load\030\001 \002(\002\022\025\n\rdump_extended\030"
  "\002 \002(\010\022\026\n\016dump_retracted\030\003 \002(\010\"\264\001\n\027Deposi"
  "tionStateDetailed\022\021\n\tleft_load\030\001 \002(\002\022\022\n\n"
  "right_load\030\002 \002(\002\022\032\n\022dump_left_extended\030\003"
  " \002(\010\022\033\n\023dump_right_extended\030\004 \002(\010\022\033\n\023dum"
  "p_left_retracted\030\005 \002(\010\022\034\n\024dump_right_ret"
  "racted\030\006 \002(\010\"\230\001\n\023LocObsStateDetailed\022C\n\014"
  "loc_position\030\001 \002(\0132-.com.cwrubotix.glenn"
  "ifer.LocalizationPosition\022<\n\tobstacles\030\002"
  " \003(\0132).com.cwrubotix.glennifer.ObstacleP"
  "osition\"U\n\024LocalizationPosition\022\022\n\nx_pos"
  "ition\030\001 \002(\002\022\022\n\ny_position\030\002 \002(\002\022\025\n\rbeari"
  "ng_angle\030\003 \002(\002\"`\n\020ObstaclePosition\022\022\n\nx_"
  "position\030\001 \002(\002\022\022\n\ny_position\030\002 \002(\002\022\022\n\nz_"
  "position\030\003 \002(\002\022\020\n\010diameter\030\004 \002(\002\"\274\001\n\rLau"
  "nchTransit\022\021\n\tcur_x_pos\030\001 \002(\002\022\021\n\tcur_y_p"
  "os\030\002 \002(\002\022\023\n\013cur_heading\030\003 \002(\002\022\022\n\ndest_x_"
  "pos\030\004 \002(\002\022\022\n\ndest_y_pos\030\005 \002(\002\022\022\n\ntime_al"
  "loc\030\006 \002(\002\0224\n\ttimestamp\030\007 \002(\0132!.com.cwrub"
  "otix.glennifer.UnixTime\"\300\001\n\013LaunchDrill\022"
  "\021\n\tcurrent_x\030\001 \002(\002\022\021\n\tcurrent_y\030\002 \002(\002\022\027\n"
  "\017current_Heading\030\003 \002(\002\022\024\n\014load_desired\030\004"
  " \002(\002\022\r\n\005start\030\005 \002(\010\022\027\n\017time_allocation\030\006"
  " \002(\002\0224\n\ttimestamp\030\007 \002(\0132!.com.cwrubotix."
  "glennifer.UnixTime\"\231\001\n\nLaunchDump\022\026\n\016cur"
  "rent_length\030\001 \002(\002\022\025\n\rcurrent_angle\030\002 \002(\002"
  "\022\r\n\005start\030\003 \002(\010\022\027\n\017time_allocation\030\004 \002(\002"
  "\0224\n\ttimestamp\030\005 \002(\0132!.com.cwrubotix.glen"
  "nifer.UnixTime\"T\n\016ProgressReport\022\014\n\004done"
  "\030\001 \002(\010\0224\n\ttimestamp\030\002 \002(\0132!.com.cwruboti"
  "x.glennifer.UnixTime\"U\n\013ErrorReport\022\020\n\010r"
  "esolved\030\001 \002(\010\0224\n\ttimestamp\030\002 \002(\0132!.com.c"
  "wrubotix.glennifer.UnixTime\"g\n\017TransitSo"
  "ftStop\022\020\n\010timeLeft\030\001 \002(\002\022\014\n\004stop\030\002 \002(\010\0224"
  "\n\ttimestamp\030\003 \002(\0132!.com.cwrubotix.glenni"
  "fer.UnixTime\"e\n\rDrillSoftStop\022\020\n\010timeLef"
  "t\030\001 \002(\002\022\014\n\004stop\030\002 \002(\010\0224\n\ttimestamp\030\003 \002(\013"
  "2!.com.cwrubotix.glennifer.UnixTime\"d\n\014D"
  "umpSoftStop\022\020\n\010timeLeft\030\001 \002(\002\022\014\n\004stop\030\002 "
  "\002(\010\0224\n\ttimestamp\030\003 \002(\0132!.com.cwrubotix.g"
  "lennifer.UnixTime\"U\n\017TransitHardStop\022\014\n\004"
  "stop\030\001 \002(\010\0224\n\ttimestamp\030\002 \002(\0132!.com.cwru"
  "botix.glennifer.UnixTime\"S\n\rDrillHardSto"
  "p\022\014\n\004stop\030\001 \002(\010\0224\n\ttimestamp\030\002 \002(\0132!.com"
  ".cwrubotix.glennifer.UnixTime\"R\n\014DumpHar"
  "dStop\022\014\n\004stop\030\001 \002(\010\0224\n\ttimestamp\030\002 \002(\0132!"
  ".com.cwrubotix.glennifer.UnixTime\"z\n\022Tra"
  "nsitNewObstacle\022\r\n\005x_pos\030\001 \002(\002\022\r\n\005y_pos\030"
  "\002 \002(\002\022\020\n\010diameter\030\003 \002(\002\0224\n\ttimestamp\030\004 \002"
  "(\0132!.com.cwrubotix.glennifer.UnixTime\"\\\n"
  "\023AutonomyNextHeading\022\017\n\007heading\030\001 \002(\002\0224\n"
  "\ttimestamp\030\002 \001(\0132!.com.cwrubotix.glennif"
  "er.UnixTime"
,
  "messages.proto", &assign_descriptors_table_messages_2eproto, 5131,
};

void AddDescriptors_messages_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_messages_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2eproto = []() { AddDescriptors_messages_2eproto(); return true; }();
namespace com {
namespace cwrubotix {
namespace glennifer {

// ===================================================================

void UnixTime::InitAsDefaultInstance() {
}
class UnixTime::HasBitSetters {
 public:
  static void set_has_time_int(UnixTime* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_time_frac(UnixTime* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnixTime::kTimeIntFieldNumber;
const int UnixTime::kTimeFracFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnixTime::UnixTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.UnixTime)
}
UnixTime::UnixTime(const UnixTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_int_, &from.time_int_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_frac_) -
    reinterpret_cast<char*>(&time_int_)) + sizeof(time_frac_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.UnixTime)
}

void UnixTime::SharedCtor() {
  ::memset(&time_int_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_frac_) -
      reinterpret_cast<char*>(&time_int_)) + sizeof(time_frac_));
}

UnixTime::~UnixTime() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.UnixTime)
  SharedDtor();
}

void UnixTime::SharedDtor() {
}

void UnixTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnixTime& UnixTime::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UnixTime_messages_2eproto.base);
  return *internal_default_instance();
}


void UnixTime::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.UnixTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&time_int_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_frac_) -
        reinterpret_cast<char*>(&time_int_)) + sizeof(time_frac_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UnixTime::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UnixTime*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required uint64 time_int = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_time_int(value);
        break;
      }
      // required float time_frac = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_time_frac(val);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UnixTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.UnixTime)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time_int = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_time_int(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_int_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float time_frac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_time_frac(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_frac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.UnixTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.UnixTime)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UnixTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.UnixTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time_int = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_int(), output);
  }

  // required float time_frac = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->time_frac(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.UnixTime)
}

::google::protobuf::uint8* UnixTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.UnixTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time_int = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time_int(), target);
  }

  // required float time_frac = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->time_frac(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.UnixTime)
  return target;
}

size_t UnixTime::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.UnixTime)
  size_t total_size = 0;

  if (has_time_int()) {
    // required uint64 time_int = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_int());
  }

  if (has_time_frac()) {
    // required float time_frac = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t UnixTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.UnixTime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 time_int = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_int());

    // required float time_frac = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnixTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.UnixTime)
  GOOGLE_DCHECK_NE(&from, this);
  const UnixTime* source =
      ::google::protobuf::DynamicCastToGenerated<UnixTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.UnixTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.UnixTime)
    MergeFrom(*source);
  }
}

void UnixTime::MergeFrom(const UnixTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.UnixTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      time_int_ = from.time_int_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_frac_ = from.time_frac_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnixTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.UnixTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnixTime::CopyFrom(const UnixTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.UnixTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnixTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UnixTime::Swap(UnixTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnixTime::InternalSwap(UnixTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_int_, other->time_int_);
  swap(time_frac_, other->time_frac_);
}

::google::protobuf::Metadata UnixTime::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RpmUpdate::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_RpmUpdate_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class RpmUpdate::HasBitSetters {
 public:
  static void set_has_rpm(RpmUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const RpmUpdate* msg);
  static void set_has_timestamp(RpmUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
RpmUpdate::HasBitSetters::timestamp(const RpmUpdate* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpmUpdate::kRpmFieldNumber;
const int RpmUpdate::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpmUpdate::RpmUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.RpmUpdate)
}
RpmUpdate::RpmUpdate(const RpmUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  rpm_ = from.rpm_;
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.RpmUpdate)
}

void RpmUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RpmUpdate_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rpm_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(rpm_));
}

RpmUpdate::~RpmUpdate() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.RpmUpdate)
  SharedDtor();
}

void RpmUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void RpmUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RpmUpdate& RpmUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RpmUpdate_messages_2eproto.base);
  return *internal_default_instance();
}


void RpmUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.RpmUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  rpm_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RpmUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RpmUpdate*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float rpm = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_rpm(val);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RpmUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.RpmUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float rpm = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_rpm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.RpmUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.RpmUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RpmUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.RpmUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float rpm = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->rpm(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.RpmUpdate)
}

::google::protobuf::uint8* RpmUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.RpmUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float rpm = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->rpm(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.RpmUpdate)
  return target;
}

size_t RpmUpdate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.RpmUpdate)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_rpm()) {
    // required float rpm = 1;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t RpmUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.RpmUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required float rpm = 1;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RpmUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.RpmUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const RpmUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<RpmUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.RpmUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.RpmUpdate)
    MergeFrom(*source);
  }
}

void RpmUpdate::MergeFrom(const RpmUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.RpmUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      rpm_ = from.rpm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RpmUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.RpmUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpmUpdate::CopyFrom(const RpmUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.RpmUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpmUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void RpmUpdate::Swap(RpmUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpmUpdate::InternalSwap(RpmUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(rpm_, other->rpm_);
}

::google::protobuf::Metadata RpmUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DisplacementUpdate::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_DisplacementUpdate_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class DisplacementUpdate::HasBitSetters {
 public:
  static void set_has_displacement(DisplacementUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const DisplacementUpdate* msg);
  static void set_has_timestamp(DisplacementUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
DisplacementUpdate::HasBitSetters::timestamp(const DisplacementUpdate* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisplacementUpdate::kDisplacementFieldNumber;
const int DisplacementUpdate::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisplacementUpdate::DisplacementUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.DisplacementUpdate)
}
DisplacementUpdate::DisplacementUpdate(const DisplacementUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  displacement_ = from.displacement_;
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.DisplacementUpdate)
}

void DisplacementUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DisplacementUpdate_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&displacement_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(displacement_));
}

DisplacementUpdate::~DisplacementUpdate() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.DisplacementUpdate)
  SharedDtor();
}

void DisplacementUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void DisplacementUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplacementUpdate& DisplacementUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DisplacementUpdate_messages_2eproto.base);
  return *internal_default_instance();
}


void DisplacementUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.DisplacementUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  displacement_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DisplacementUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DisplacementUpdate*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float displacement = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_displacement(val);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DisplacementUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.DisplacementUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float displacement = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_displacement(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &displacement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.DisplacementUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.DisplacementUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DisplacementUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.DisplacementUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float displacement = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->displacement(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.DisplacementUpdate)
}

::google::protobuf::uint8* DisplacementUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.DisplacementUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float displacement = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->displacement(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.DisplacementUpdate)
  return target;
}

size_t DisplacementUpdate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.DisplacementUpdate)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_displacement()) {
    // required float displacement = 1;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t DisplacementUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.DisplacementUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required float displacement = 1;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplacementUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.DisplacementUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const DisplacementUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<DisplacementUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.DisplacementUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.DisplacementUpdate)
    MergeFrom(*source);
  }
}

void DisplacementUpdate::MergeFrom(const DisplacementUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.DisplacementUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      displacement_ = from.displacement_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DisplacementUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.DisplacementUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplacementUpdate::CopyFrom(const DisplacementUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.DisplacementUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplacementUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void DisplacementUpdate::Swap(DisplacementUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisplacementUpdate::InternalSwap(DisplacementUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(displacement_, other->displacement_);
}

::google::protobuf::Metadata DisplacementUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PositionUpdate::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_PositionUpdate_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class PositionUpdate::HasBitSetters {
 public:
  static void set_has_position(PositionUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const PositionUpdate* msg);
  static void set_has_timestamp(PositionUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
PositionUpdate::HasBitSetters::timestamp(const PositionUpdate* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionUpdate::kPositionFieldNumber;
const int PositionUpdate::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionUpdate::PositionUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.PositionUpdate)
}
PositionUpdate::PositionUpdate(const PositionUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  position_ = from.position_;
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.PositionUpdate)
}

void PositionUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PositionUpdate_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(position_));
}

PositionUpdate::~PositionUpdate() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.PositionUpdate)
  SharedDtor();
}

void PositionUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void PositionUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionUpdate& PositionUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PositionUpdate_messages_2eproto.base);
  return *internal_default_instance();
}


void PositionUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.PositionUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  position_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositionUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PositionUpdate*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float position = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_position(val);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositionUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.PositionUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_position(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.PositionUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.PositionUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositionUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.PositionUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float position = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->position(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.PositionUpdate)
}

::google::protobuf::uint8* PositionUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.PositionUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float position = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->position(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.PositionUpdate)
  return target;
}

size_t PositionUpdate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.PositionUpdate)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_position()) {
    // required float position = 1;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PositionUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.PositionUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required float position = 1;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.PositionUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<PositionUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.PositionUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.PositionUpdate)
    MergeFrom(*source);
  }
}

void PositionUpdate::MergeFrom(const PositionUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.PositionUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PositionUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.PositionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionUpdate::CopyFrom(const PositionUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.PositionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void PositionUpdate::Swap(PositionUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PositionUpdate::InternalSwap(PositionUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(position_, other->position_);
}

::google::protobuf::Metadata PositionUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CurrentUpdate::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_CurrentUpdate_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class CurrentUpdate::HasBitSetters {
 public:
  static void set_has_current(CurrentUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const CurrentUpdate* msg);
  static void set_has_timestamp(CurrentUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
CurrentUpdate::HasBitSetters::timestamp(const CurrentUpdate* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrentUpdate::kCurrentFieldNumber;
const int CurrentUpdate::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrentUpdate::CurrentUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.CurrentUpdate)
}
CurrentUpdate::CurrentUpdate(const CurrentUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  current_ = from.current_;
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.CurrentUpdate)
}

void CurrentUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CurrentUpdate_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(current_));
}

CurrentUpdate::~CurrentUpdate() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.CurrentUpdate)
  SharedDtor();
}

void CurrentUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void CurrentUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurrentUpdate& CurrentUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CurrentUpdate_messages_2eproto.base);
  return *internal_default_instance();
}


void CurrentUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.CurrentUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  current_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CurrentUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CurrentUpdate*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float current = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_current(val);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CurrentUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.CurrentUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float current = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_current(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.CurrentUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.CurrentUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CurrentUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.CurrentUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float current = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->current(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.CurrentUpdate)
}

::google::protobuf::uint8* CurrentUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.CurrentUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float current = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->current(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.CurrentUpdate)
  return target;
}

size_t CurrentUpdate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.CurrentUpdate)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_current()) {
    // required float current = 1;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CurrentUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.CurrentUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required float current = 1;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrentUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.CurrentUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrentUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<CurrentUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.CurrentUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.CurrentUpdate)
    MergeFrom(*source);
  }
}

void CurrentUpdate::MergeFrom(const CurrentUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.CurrentUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      current_ = from.current_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CurrentUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.CurrentUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentUpdate::CopyFrom(const CurrentUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.CurrentUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void CurrentUpdate::Swap(CurrentUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrentUpdate::InternalSwap(CurrentUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(current_, other->current_);
}

::google::protobuf::Metadata CurrentUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LimitUpdate::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_LimitUpdate_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class LimitUpdate::HasBitSetters {
 public:
  static void set_has_pressed(LimitUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const LimitUpdate* msg);
  static void set_has_timestamp(LimitUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
LimitUpdate::HasBitSetters::timestamp(const LimitUpdate* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LimitUpdate::kPressedFieldNumber;
const int LimitUpdate::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LimitUpdate::LimitUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.LimitUpdate)
}
LimitUpdate::LimitUpdate(const LimitUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  pressed_ = from.pressed_;
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.LimitUpdate)
}

void LimitUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LimitUpdate_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pressed_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(pressed_));
}

LimitUpdate::~LimitUpdate() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.LimitUpdate)
  SharedDtor();
}

void LimitUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void LimitUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LimitUpdate& LimitUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LimitUpdate_messages_2eproto.base);
  return *internal_default_instance();
}


void LimitUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.LimitUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  pressed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LimitUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LimitUpdate*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required bool pressed = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_pressed(value);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LimitUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.LimitUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool pressed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_pressed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.LimitUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.LimitUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LimitUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.LimitUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool pressed = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->pressed(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.LimitUpdate)
}

::google::protobuf::uint8* LimitUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.LimitUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool pressed = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->pressed(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.LimitUpdate)
  return target;
}

size_t LimitUpdate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.LimitUpdate)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_pressed()) {
    // required bool pressed = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t LimitUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.LimitUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required bool pressed = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LimitUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.LimitUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const LimitUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<LimitUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.LimitUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.LimitUpdate)
    MergeFrom(*source);
  }
}

void LimitUpdate::MergeFrom(const LimitUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.LimitUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      pressed_ = from.pressed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LimitUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.LimitUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitUpdate::CopyFrom(const LimitUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.LimitUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void LimitUpdate::Swap(LimitUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LimitUpdate::InternalSwap(LimitUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(pressed_, other->pressed_);
}

::google::protobuf::Metadata LimitUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ImuUpdate::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_ImuUpdate_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class ImuUpdate::HasBitSetters {
 public:
  static void set_has_orientation(ImuUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const ImuUpdate* msg);
  static void set_has_timestamp(ImuUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
ImuUpdate::HasBitSetters::timestamp(const ImuUpdate* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImuUpdate::kOrientationFieldNumber;
const int ImuUpdate::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImuUpdate::ImuUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.ImuUpdate)
}
ImuUpdate::ImuUpdate(const ImuUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  orientation_ = from.orientation_;
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.ImuUpdate)
}

void ImuUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ImuUpdate_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(orientation_));
}

ImuUpdate::~ImuUpdate() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.ImuUpdate)
  SharedDtor();
}

void ImuUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void ImuUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImuUpdate& ImuUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ImuUpdate_messages_2eproto.base);
  return *internal_default_instance();
}


void ImuUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.ImuUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  orientation_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ImuUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ImuUpdate*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float orientation = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_orientation(val);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ImuUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.ImuUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float orientation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_orientation(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.ImuUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.ImuUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ImuUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.ImuUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float orientation = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->orientation(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.ImuUpdate)
}

::google::protobuf::uint8* ImuUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.ImuUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float orientation = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->orientation(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.ImuUpdate)
  return target;
}

size_t ImuUpdate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.ImuUpdate)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_orientation()) {
    // required float orientation = 1;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ImuUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.ImuUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required float orientation = 1;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImuUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.ImuUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<ImuUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.ImuUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.ImuUpdate)
    MergeFrom(*source);
  }
}

void ImuUpdate::MergeFrom(const ImuUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.ImuUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      orientation_ = from.orientation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImuUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.ImuUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuUpdate::CopyFrom(const ImuUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.ImuUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void ImuUpdate::Swap(ImuUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImuUpdate::InternalSwap(ImuUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(orientation_, other->orientation_);
}

::google::protobuf::Metadata ImuUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LoadUpdate::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_LoadUpdate_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class LoadUpdate::HasBitSetters {
 public:
  static void set_has_load(LoadUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const LoadUpdate* msg);
  static void set_has_timestamp(LoadUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
LoadUpdate::HasBitSetters::timestamp(const LoadUpdate* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadUpdate::kLoadFieldNumber;
const int LoadUpdate::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadUpdate::LoadUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.LoadUpdate)
}
LoadUpdate::LoadUpdate(const LoadUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  load_ = from.load_;
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.LoadUpdate)
}

void LoadUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LoadUpdate_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&load_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(load_));
}

LoadUpdate::~LoadUpdate() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.LoadUpdate)
  SharedDtor();
}

void LoadUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void LoadUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadUpdate& LoadUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LoadUpdate_messages_2eproto.base);
  return *internal_default_instance();
}


void LoadUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.LoadUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  load_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoadUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LoadUpdate*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float load = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_load(val);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoadUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.LoadUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float load = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_load(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.LoadUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.LoadUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LoadUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.LoadUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float load = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->load(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.LoadUpdate)
}

::google::protobuf::uint8* LoadUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.LoadUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float load = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->load(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.LoadUpdate)
  return target;
}

size_t LoadUpdate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.LoadUpdate)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_load()) {
    // required float load = 1;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t LoadUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.LoadUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required float load = 1;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.LoadUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<LoadUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.LoadUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.LoadUpdate)
    MergeFrom(*source);
  }
}

void LoadUpdate::MergeFrom(const LoadUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.LoadUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      load_ = from.load_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoadUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.LoadUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadUpdate::CopyFrom(const LoadUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.LoadUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void LoadUpdate::Swap(LoadUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadUpdate::InternalSwap(LoadUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(load_, other->load_);
}

::google::protobuf::Metadata LoadUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CountUpdate::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_CountUpdate_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class CountUpdate::HasBitSetters {
 public:
  static void set_has_count(CountUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const CountUpdate* msg);
  static void set_has_timestamp(CountUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
CountUpdate::HasBitSetters::timestamp(const CountUpdate* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CountUpdate::kCountFieldNumber;
const int CountUpdate::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CountUpdate::CountUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.CountUpdate)
}
CountUpdate::CountUpdate(const CountUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.CountUpdate)
}

void CountUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CountUpdate_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(count_));
}

CountUpdate::~CountUpdate() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.CountUpdate)
  SharedDtor();
}

void CountUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void CountUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CountUpdate& CountUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CountUpdate_messages_2eproto.base);
  return *internal_default_instance();
}


void CountUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.CountUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CountUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CountUpdate*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required uint32 count = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint32 value = val;
        msg->set_count(value);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CountUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.CountUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.CountUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.CountUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CountUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.CountUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 count = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.CountUpdate)
}

::google::protobuf::uint8* CountUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.CountUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 count = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.CountUpdate)
  return target;
}

size_t CountUpdate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.CountUpdate)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_count()) {
    // required uint32 count = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t CountUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.CountUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required uint32 count = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CountUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.CountUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CountUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<CountUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.CountUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.CountUpdate)
    MergeFrom(*source);
  }
}

void CountUpdate::MergeFrom(const CountUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.CountUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CountUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.CountUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountUpdate::CopyFrom(const CountUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.CountUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void CountUpdate::Swap(CountUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CountUpdate::InternalSwap(CountUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(count_, other->count_);
}

::google::protobuf::Metadata CountUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Fault::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_Fault_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class Fault::HasBitSetters {
 public:
  static void set_has_fault_code(Fault* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const Fault* msg);
  static void set_has_timestamp(Fault* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
Fault::HasBitSetters::timestamp(const Fault* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fault::kFaultCodeFieldNumber;
const int Fault::kTimestampFieldNumber;
const int Fault::kParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fault::Fault()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.Fault)
}
Fault::Fault(const Fault& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      params_(from.params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  fault_code_ = from.fault_code_;
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.Fault)
}

void Fault::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Fault_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fault_code_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(fault_code_));
}

Fault::~Fault() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.Fault)
  SharedDtor();
}

void Fault::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void Fault::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fault& Fault::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Fault_messages_2eproto.base);
  return *internal_default_instance();
}


void Fault::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.Fault)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  fault_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Fault::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Fault*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required uint32 fault_code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint32 value = val;
        msg->set_fault_code(value);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // repeated uint32 params = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            ::google::protobuf::uint64 val;
            ptr = Varint::Parse64(ptr, &val);
            if (!ptr) goto error;
            ::google::protobuf::uint32 value = val;
            msg->add_params(value);
            if (ptr >= end) break;
          } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_params();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Fault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.Fault)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 fault_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fault_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fault_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_params())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_params())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.Fault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.Fault)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Fault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.Fault)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 fault_code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fault_code(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::timestamp(this), output);
  }

  // repeated uint32 params = 3;
  for (int i = 0, n = this->params_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->params(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.Fault)
}

::google::protobuf::uint8* Fault::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.Fault)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 fault_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fault_code(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::timestamp(this), deterministic, target);
  }

  // repeated uint32 params = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->params_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.Fault)
  return target;
}

size_t Fault::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.Fault)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_fault_code()) {
    // required uint32 fault_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fault_code());
  }

  return total_size;
}
size_t Fault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.Fault)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required uint32 fault_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fault_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 params = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->params_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->params_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fault::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.Fault)
  GOOGLE_DCHECK_NE(&from, this);
  const Fault* source =
      ::google::protobuf::DynamicCastToGenerated<Fault>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.Fault)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.Fault)
    MergeFrom(*source);
  }
}

void Fault::MergeFrom(const Fault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.Fault)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      fault_code_ = from.fault_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fault::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.Fault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fault::CopyFrom(const Fault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.Fault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fault::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void Fault::Swap(Fault* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fault::InternalSwap(Fault* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  params_.InternalSwap(&other->params_);
  swap(timestamp_, other->timestamp_);
  swap(fault_code_, other->fault_code_);
}

::google::protobuf::Metadata Fault::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Adjustment::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_Adjustment_default_instance_._instance.get_mutable()->source_fault_ = const_cast< ::com::cwrubotix::glennifer::Fault*>(
      ::com::cwrubotix::glennifer::Fault::internal_default_instance());
  ::com::cwrubotix::glennifer::_Adjustment_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class Adjustment::HasBitSetters {
 public:
  static const ::com::cwrubotix::glennifer::Fault& source_fault(const Adjustment* msg);
  static void set_has_source_fault(Adjustment* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_adjustment_code(Adjustment* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const Adjustment* msg);
  static void set_has_timestamp(Adjustment* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::com::cwrubotix::glennifer::Fault&
Adjustment::HasBitSetters::source_fault(const Adjustment* msg) {
  return *msg->source_fault_;
}
const ::com::cwrubotix::glennifer::UnixTime&
Adjustment::HasBitSetters::timestamp(const Adjustment* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Adjustment::kSourceFaultFieldNumber;
const int Adjustment::kAdjustmentCodeFieldNumber;
const int Adjustment::kTimestampFieldNumber;
const int Adjustment::kParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Adjustment::Adjustment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.Adjustment)
}
Adjustment::Adjustment(const Adjustment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      params_(from.params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_source_fault()) {
    source_fault_ = new ::com::cwrubotix::glennifer::Fault(*from.source_fault_);
  } else {
    source_fault_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  adjustment_code_ = from.adjustment_code_;
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.Adjustment)
}

void Adjustment::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Adjustment_messages_2eproto.base);
  ::memset(&source_fault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adjustment_code_) -
      reinterpret_cast<char*>(&source_fault_)) + sizeof(adjustment_code_));
}

Adjustment::~Adjustment() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.Adjustment)
  SharedDtor();
}

void Adjustment::SharedDtor() {
  if (this != internal_default_instance()) delete source_fault_;
  if (this != internal_default_instance()) delete timestamp_;
}

void Adjustment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Adjustment& Adjustment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Adjustment_messages_2eproto.base);
  return *internal_default_instance();
}


void Adjustment::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.Adjustment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(source_fault_ != NULL);
      source_fault_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(timestamp_ != NULL);
      timestamp_->Clear();
    }
  }
  adjustment_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Adjustment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Adjustment*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // optional .com.cwrubotix.glennifer.Fault source_fault = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::Fault::_InternalParse;
        object = msg->mutable_source_fault();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // required uint32 adjustment_code = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint32 value = val;
        msg->set_adjustment_code(value);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // repeated uint32 params = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            ::google::protobuf::uint64 val;
            ptr = Varint::Parse64(ptr, &val);
            if (!ptr) goto error;
            ::google::protobuf::uint32 value = val;
            msg->add_params(value);
            if (ptr >= end) break;
          } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_params();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Adjustment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.Adjustment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.cwrubotix.glennifer.Fault source_fault = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_fault()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 adjustment_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_adjustment_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adjustment_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 params = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_params())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_params())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.Adjustment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.Adjustment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Adjustment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.Adjustment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.cwrubotix.glennifer.Fault source_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::source_fault(this), output);
  }

  // required uint32 adjustment_code = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->adjustment_code(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::timestamp(this), output);
  }

  // repeated uint32 params = 4;
  for (int i = 0, n = this->params_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->params(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.Adjustment)
}

::google::protobuf::uint8* Adjustment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.Adjustment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.cwrubotix.glennifer.Fault source_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::source_fault(this), deterministic, target);
  }

  // required uint32 adjustment_code = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->adjustment_code(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::timestamp(this), deterministic, target);
  }

  // repeated uint32 params = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->params_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.Adjustment)
  return target;
}

size_t Adjustment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.Adjustment)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_adjustment_code()) {
    // required uint32 adjustment_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->adjustment_code());
  }

  return total_size;
}
size_t Adjustment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.Adjustment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required uint32 adjustment_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->adjustment_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 params = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->params_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->params_size());
    total_size += data_size;
  }

  // optional .com.cwrubotix.glennifer.Fault source_fault = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *source_fault_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Adjustment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.Adjustment)
  GOOGLE_DCHECK_NE(&from, this);
  const Adjustment* source =
      ::google::protobuf::DynamicCastToGenerated<Adjustment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.Adjustment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.Adjustment)
    MergeFrom(*source);
  }
}

void Adjustment::MergeFrom(const Adjustment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.Adjustment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_source_fault()->::com::cwrubotix::glennifer::Fault::MergeFrom(from.source_fault());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000004u) {
      adjustment_code_ = from.adjustment_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Adjustment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.Adjustment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Adjustment::CopyFrom(const Adjustment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.Adjustment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Adjustment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_source_fault()) {
    if (!this->source_fault_->IsInitialized()) return false;
  }
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void Adjustment::Swap(Adjustment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Adjustment::InternalSwap(Adjustment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  params_.InternalSwap(&other->params_);
  swap(source_fault_, other->source_fault_);
  swap(timestamp_, other->timestamp_);
  swap(adjustment_code_, other->adjustment_code_);
}

::google::protobuf::Metadata Adjustment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SpeedControlCommand::InitAsDefaultInstance() {
}
class SpeedControlCommand::HasBitSetters {
 public:
  static void set_has_rpm(SpeedControlCommand* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timeout(SpeedControlCommand* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedControlCommand::kRpmFieldNumber;
const int SpeedControlCommand::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedControlCommand::SpeedControlCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.SpeedControlCommand)
}
SpeedControlCommand::SpeedControlCommand(const SpeedControlCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rpm_, &from.rpm_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&rpm_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.SpeedControlCommand)
}

void SpeedControlCommand::SharedCtor() {
  ::memset(&rpm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&rpm_)) + sizeof(timeout_));
}

SpeedControlCommand::~SpeedControlCommand() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.SpeedControlCommand)
  SharedDtor();
}

void SpeedControlCommand::SharedDtor() {
}

void SpeedControlCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedControlCommand& SpeedControlCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SpeedControlCommand_messages_2eproto.base);
  return *internal_default_instance();
}


void SpeedControlCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.SpeedControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&rpm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&rpm_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpeedControlCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SpeedControlCommand*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float rpm = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_rpm(val);
        break;
      }
      // required float timeout = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_timeout(val);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpeedControlCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.SpeedControlCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float rpm = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_rpm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float timeout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_timeout(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.SpeedControlCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.SpeedControlCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpeedControlCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.SpeedControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float rpm = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->rpm(), output);
  }

  // required float timeout = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.SpeedControlCommand)
}

::google::protobuf::uint8* SpeedControlCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.SpeedControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float rpm = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->rpm(), target);
  }

  // required float timeout = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.SpeedControlCommand)
  return target;
}

size_t SpeedControlCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.SpeedControlCommand)
  size_t total_size = 0;

  if (has_rpm()) {
    // required float rpm = 1;
    total_size += 1 + 4;
  }

  if (has_timeout()) {
    // required float timeout = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SpeedControlCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.SpeedControlCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float rpm = 1;
    total_size += 1 + 4;

    // required float timeout = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedControlCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.SpeedControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedControlCommand* source =
      ::google::protobuf::DynamicCastToGenerated<SpeedControlCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.SpeedControlCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.SpeedControlCommand)
    MergeFrom(*source);
  }
}

void SpeedControlCommand::MergeFrom(const SpeedControlCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.SpeedControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      rpm_ = from.rpm_;
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedControlCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.SpeedControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedControlCommand::CopyFrom(const SpeedControlCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.SpeedControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedControlCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SpeedControlCommand::Swap(SpeedControlCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedControlCommand::InternalSwap(SpeedControlCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rpm_, other->rpm_);
  swap(timeout_, other->timeout_);
}

::google::protobuf::Metadata SpeedControlCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AllWheelsCommand::InitAsDefaultInstance() {
}
class AllWheelsCommand::HasBitSetters {
 public:
  static void set_has_front_left(AllWheelsCommand* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_front_right(AllWheelsCommand* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_back_left(AllWheelsCommand* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_back_right(AllWheelsCommand* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllWheelsCommand::kFrontLeftFieldNumber;
const int AllWheelsCommand::kFrontRightFieldNumber;
const int AllWheelsCommand::kBackLeftFieldNumber;
const int AllWheelsCommand::kBackRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllWheelsCommand::AllWheelsCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.AllWheelsCommand)
}
AllWheelsCommand::AllWheelsCommand(const AllWheelsCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&front_left_, &from.front_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&back_right_) -
    reinterpret_cast<char*>(&front_left_)) + sizeof(back_right_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.AllWheelsCommand)
}

void AllWheelsCommand::SharedCtor() {
  ::memset(&front_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&back_right_) -
      reinterpret_cast<char*>(&front_left_)) + sizeof(back_right_));
}

AllWheelsCommand::~AllWheelsCommand() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.AllWheelsCommand)
  SharedDtor();
}

void AllWheelsCommand::SharedDtor() {
}

void AllWheelsCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllWheelsCommand& AllWheelsCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AllWheelsCommand_messages_2eproto.base);
  return *internal_default_instance();
}


void AllWheelsCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.AllWheelsCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&front_left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&back_right_) -
        reinterpret_cast<char*>(&front_left_)) + sizeof(back_right_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AllWheelsCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AllWheelsCommand*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float front_left = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_front_left(val);
        break;
      }
      // required float front_right = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_front_right(val);
        break;
      }
      // required float back_left = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_back_left(val);
        break;
      }
      // required float back_right = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_back_right(val);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AllWheelsCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.AllWheelsCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float front_left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_front_left(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &front_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float front_right = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_front_right(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &front_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float back_left = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_back_left(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &back_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float back_right = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_back_right(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &back_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.AllWheelsCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.AllWheelsCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AllWheelsCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.AllWheelsCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float front_left = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->front_left(), output);
  }

  // required float front_right = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->front_right(), output);
  }

  // required float back_left = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->back_left(), output);
  }

  // required float back_right = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->back_right(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.AllWheelsCommand)
}

::google::protobuf::uint8* AllWheelsCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.AllWheelsCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float front_left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->front_left(), target);
  }

  // required float front_right = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->front_right(), target);
  }

  // required float back_left = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->back_left(), target);
  }

  // required float back_right = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->back_right(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.AllWheelsCommand)
  return target;
}

size_t AllWheelsCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.AllWheelsCommand)
  size_t total_size = 0;

  if (has_front_left()) {
    // required float front_left = 1;
    total_size += 1 + 4;
  }

  if (has_front_right()) {
    // required float front_right = 2;
    total_size += 1 + 4;
  }

  if (has_back_left()) {
    // required float back_left = 3;
    total_size += 1 + 4;
  }

  if (has_back_right()) {
    // required float back_right = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t AllWheelsCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.AllWheelsCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float front_left = 1;
    total_size += 1 + 4;

    // required float front_right = 2;
    total_size += 1 + 4;

    // required float back_left = 3;
    total_size += 1 + 4;

    // required float back_right = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllWheelsCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.AllWheelsCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const AllWheelsCommand* source =
      ::google::protobuf::DynamicCastToGenerated<AllWheelsCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.AllWheelsCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.AllWheelsCommand)
    MergeFrom(*source);
  }
}

void AllWheelsCommand::MergeFrom(const AllWheelsCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.AllWheelsCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      front_left_ = from.front_left_;
    }
    if (cached_has_bits & 0x00000002u) {
      front_right_ = from.front_right_;
    }
    if (cached_has_bits & 0x00000004u) {
      back_left_ = from.back_left_;
    }
    if (cached_has_bits & 0x00000008u) {
      back_right_ = from.back_right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AllWheelsCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.AllWheelsCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllWheelsCommand::CopyFrom(const AllWheelsCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.AllWheelsCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllWheelsCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void AllWheelsCommand::Swap(AllWheelsCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllWheelsCommand::InternalSwap(AllWheelsCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(front_left_, other->front_left_);
  swap(front_right_, other->front_right_);
  swap(back_left_, other->back_left_);
  swap(back_right_, other->back_right_);
}

::google::protobuf::Metadata AllWheelsCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ClosedLoopCommand::InitAsDefaultInstance() {
}
class ClosedLoopCommand::HasBitSetters {
 public:
  static void set_has_closed(ClosedLoopCommand* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClosedLoopCommand::kClosedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClosedLoopCommand::ClosedLoopCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.ClosedLoopCommand)
}
ClosedLoopCommand::ClosedLoopCommand(const ClosedLoopCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  closed_ = from.closed_;
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.ClosedLoopCommand)
}

void ClosedLoopCommand::SharedCtor() {
  closed_ = false;
}

ClosedLoopCommand::~ClosedLoopCommand() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.ClosedLoopCommand)
  SharedDtor();
}

void ClosedLoopCommand::SharedDtor() {
}

void ClosedLoopCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClosedLoopCommand& ClosedLoopCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ClosedLoopCommand_messages_2eproto.base);
  return *internal_default_instance();
}


void ClosedLoopCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.ClosedLoopCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  closed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClosedLoopCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ClosedLoopCommand*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required bool closed = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_closed(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClosedLoopCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.ClosedLoopCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool closed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_closed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &closed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.ClosedLoopCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.ClosedLoopCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClosedLoopCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.ClosedLoopCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool closed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->closed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.ClosedLoopCommand)
}

::google::protobuf::uint8* ClosedLoopCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.ClosedLoopCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool closed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->closed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.ClosedLoopCommand)
  return target;
}

size_t ClosedLoopCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.ClosedLoopCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bool closed = 1;
  if (has_closed()) {
    total_size += 1 + 1;
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClosedLoopCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.ClosedLoopCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ClosedLoopCommand* source =
      ::google::protobuf::DynamicCastToGenerated<ClosedLoopCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.ClosedLoopCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.ClosedLoopCommand)
    MergeFrom(*source);
  }
}

void ClosedLoopCommand::MergeFrom(const ClosedLoopCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.ClosedLoopCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_closed()) {
    set_closed(from.closed());
  }
}

void ClosedLoopCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.ClosedLoopCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClosedLoopCommand::CopyFrom(const ClosedLoopCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.ClosedLoopCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClosedLoopCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ClosedLoopCommand::Swap(ClosedLoopCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClosedLoopCommand::InternalSwap(ClosedLoopCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(closed_, other->closed_);
}

::google::protobuf::Metadata ClosedLoopCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PositionControlCommand::InitAsDefaultInstance() {
}
class PositionControlCommand::HasBitSetters {
 public:
  static void set_has_position(PositionControlCommand* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timeout(PositionControlCommand* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionControlCommand::kPositionFieldNumber;
const int PositionControlCommand::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionControlCommand::PositionControlCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.PositionControlCommand)
}
PositionControlCommand::PositionControlCommand(const PositionControlCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&position_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.PositionControlCommand)
}

void PositionControlCommand::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&position_)) + sizeof(timeout_));
}

PositionControlCommand::~PositionControlCommand() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.PositionControlCommand)
  SharedDtor();
}

void PositionControlCommand::SharedDtor() {
}

void PositionControlCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionControlCommand& PositionControlCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PositionControlCommand_messages_2eproto.base);
  return *internal_default_instance();
}


void PositionControlCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.PositionControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&position_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositionControlCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PositionControlCommand*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float position = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_position(val);
        break;
      }
      // required float timeout = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_timeout(val);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositionControlCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.PositionControlCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_position(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float timeout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_timeout(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.PositionControlCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.PositionControlCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositionControlCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.PositionControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->position(), output);
  }

  // required float timeout = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.PositionControlCommand)
}

::google::protobuf::uint8* PositionControlCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.PositionControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->position(), target);
  }

  // required float timeout = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.PositionControlCommand)
  return target;
}

size_t PositionControlCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.PositionControlCommand)
  size_t total_size = 0;

  if (has_position()) {
    // required float position = 1;
    total_size += 1 + 4;
  }

  if (has_timeout()) {
    // required float timeout = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PositionControlCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.PositionControlCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float position = 1;
    total_size += 1 + 4;

    // required float timeout = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionControlCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.PositionControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionControlCommand* source =
      ::google::protobuf::DynamicCastToGenerated<PositionControlCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.PositionControlCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.PositionControlCommand)
    MergeFrom(*source);
  }
}

void PositionControlCommand::MergeFrom(const PositionControlCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.PositionControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PositionControlCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.PositionControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionControlCommand::CopyFrom(const PositionControlCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.PositionControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionControlCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PositionControlCommand::Swap(PositionControlCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PositionControlCommand::InternalSwap(PositionControlCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(position_, other->position_);
  swap(timeout_, other->timeout_);
}

::google::protobuf::Metadata PositionControlCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TurnControlCommand::InitAsDefaultInstance() {
}
class TurnControlCommand::HasBitSetters {
 public:
  static void set_has_speed(TurnControlCommand* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_curvature(TurnControlCommand* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TurnControlCommand::kSpeedFieldNumber;
const int TurnControlCommand::kCurvatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TurnControlCommand::TurnControlCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.TurnControlCommand)
}
TurnControlCommand::TurnControlCommand(const TurnControlCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&curvature_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(curvature_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.TurnControlCommand)
}

void TurnControlCommand::SharedCtor() {
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curvature_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(curvature_));
}

TurnControlCommand::~TurnControlCommand() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.TurnControlCommand)
  SharedDtor();
}

void TurnControlCommand::SharedDtor() {
}

void TurnControlCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TurnControlCommand& TurnControlCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TurnControlCommand_messages_2eproto.base);
  return *internal_default_instance();
}


void TurnControlCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.TurnControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curvature_) -
        reinterpret_cast<char*>(&speed_)) + sizeof(curvature_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TurnControlCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TurnControlCommand*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float speed = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_speed(val);
        break;
      }
      // required float curvature = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_curvature(val);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TurnControlCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.TurnControlCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float speed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_speed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float curvature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_curvature(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.TurnControlCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.TurnControlCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TurnControlCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.TurnControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float speed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->speed(), output);
  }

  // required float curvature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->curvature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.TurnControlCommand)
}

::google::protobuf::uint8* TurnControlCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.TurnControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->speed(), target);
  }

  // required float curvature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->curvature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.TurnControlCommand)
  return target;
}

size_t TurnControlCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.TurnControlCommand)
  size_t total_size = 0;

  if (has_speed()) {
    // required float speed = 1;
    total_size += 1 + 4;
  }

  if (has_curvature()) {
    // required float curvature = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t TurnControlCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.TurnControlCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float speed = 1;
    total_size += 1 + 4;

    // required float curvature = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TurnControlCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.TurnControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const TurnControlCommand* source =
      ::google::protobuf::DynamicCastToGenerated<TurnControlCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.TurnControlCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.TurnControlCommand)
    MergeFrom(*source);
  }
}

void TurnControlCommand::MergeFrom(const TurnControlCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.TurnControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      curvature_ = from.curvature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TurnControlCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.TurnControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnControlCommand::CopyFrom(const TurnControlCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.TurnControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnControlCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TurnControlCommand::Swap(TurnControlCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TurnControlCommand::InternalSwap(TurnControlCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(speed_, other->speed_);
  swap(curvature_, other->curvature_);
}

::google::protobuf::Metadata TurnControlCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StopAllCommand::InitAsDefaultInstance() {
}
class StopAllCommand::HasBitSetters {
 public:
  static void set_has_stop(StopAllCommand* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timeout(StopAllCommand* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopAllCommand::kStopFieldNumber;
const int StopAllCommand::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopAllCommand::StopAllCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.StopAllCommand)
}
StopAllCommand::StopAllCommand(const StopAllCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stop_, &from.stop_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&stop_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.StopAllCommand)
}

void StopAllCommand::SharedCtor() {
  ::memset(&stop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&stop_)) + sizeof(timeout_));
}

StopAllCommand::~StopAllCommand() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.StopAllCommand)
  SharedDtor();
}

void StopAllCommand::SharedDtor() {
}

void StopAllCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopAllCommand& StopAllCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StopAllCommand_messages_2eproto.base);
  return *internal_default_instance();
}


void StopAllCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.StopAllCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&stop_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopAllCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StopAllCommand*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required bool stop = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_stop(value);
        break;
      }
      // required float timeout = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_timeout(val);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopAllCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.StopAllCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool stop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_stop(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float timeout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_timeout(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.StopAllCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.StopAllCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopAllCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.StopAllCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool stop = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->stop(), output);
  }

  // required float timeout = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.StopAllCommand)
}

::google::protobuf::uint8* StopAllCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.StopAllCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool stop = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->stop(), target);
  }

  // required float timeout = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.StopAllCommand)
  return target;
}

size_t StopAllCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.StopAllCommand)
  size_t total_size = 0;

  if (has_stop()) {
    // required bool stop = 1;
    total_size += 1 + 1;
  }

  if (has_timeout()) {
    // required float timeout = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t StopAllCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.StopAllCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool stop = 1;
    total_size += 1 + 1;

    // required float timeout = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopAllCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.StopAllCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const StopAllCommand* source =
      ::google::protobuf::DynamicCastToGenerated<StopAllCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.StopAllCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.StopAllCommand)
    MergeFrom(*source);
  }
}

void StopAllCommand::MergeFrom(const StopAllCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.StopAllCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stop_ = from.stop_;
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StopAllCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.StopAllCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopAllCommand::CopyFrom(const StopAllCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.StopAllCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopAllCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void StopAllCommand::Swap(StopAllCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopAllCommand::InternalSwap(StopAllCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stop_, other->stop_);
  swap(timeout_, other->timeout_);
}

::google::protobuf::Metadata StopAllCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LocomotionControlCommandStraight::InitAsDefaultInstance() {
}
class LocomotionControlCommandStraight::HasBitSetters {
 public:
  static void set_has_speed(LocomotionControlCommandStraight* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timeout(LocomotionControlCommandStraight* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocomotionControlCommandStraight::kSpeedFieldNumber;
const int LocomotionControlCommandStraight::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocomotionControlCommandStraight::LocomotionControlCommandStraight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.LocomotionControlCommandStraight)
}
LocomotionControlCommandStraight::LocomotionControlCommandStraight(const LocomotionControlCommandStraight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.LocomotionControlCommandStraight)
}

void LocomotionControlCommandStraight::SharedCtor() {
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(timeout_));
}

LocomotionControlCommandStraight::~LocomotionControlCommandStraight() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.LocomotionControlCommandStraight)
  SharedDtor();
}

void LocomotionControlCommandStraight::SharedDtor() {
}

void LocomotionControlCommandStraight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocomotionControlCommandStraight& LocomotionControlCommandStraight::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LocomotionControlCommandStraight_messages_2eproto.base);
  return *internal_default_instance();
}


void LocomotionControlCommandStraight::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.LocomotionControlCommandStraight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&speed_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocomotionControlCommandStraight::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LocomotionControlCommandStraight*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float speed = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_speed(val);
        break;
      }
      // required float timeout = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_timeout(val);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocomotionControlCommandStraight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.LocomotionControlCommandStraight)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float speed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_speed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float timeout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_timeout(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.LocomotionControlCommandStraight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.LocomotionControlCommandStraight)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocomotionControlCommandStraight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.LocomotionControlCommandStraight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float speed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->speed(), output);
  }

  // required float timeout = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.LocomotionControlCommandStraight)
}

::google::protobuf::uint8* LocomotionControlCommandStraight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.LocomotionControlCommandStraight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->speed(), target);
  }

  // required float timeout = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.LocomotionControlCommandStraight)
  return target;
}

size_t LocomotionControlCommandStraight::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.LocomotionControlCommandStraight)
  size_t total_size = 0;

  if (has_speed()) {
    // required float speed = 1;
    total_size += 1 + 4;
  }

  if (has_timeout()) {
    // required float timeout = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t LocomotionControlCommandStraight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.LocomotionControlCommandStraight)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float speed = 1;
    total_size += 1 + 4;

    // required float timeout = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocomotionControlCommandStraight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.LocomotionControlCommandStraight)
  GOOGLE_DCHECK_NE(&from, this);
  const LocomotionControlCommandStraight* source =
      ::google::protobuf::DynamicCastToGenerated<LocomotionControlCommandStraight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.LocomotionControlCommandStraight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.LocomotionControlCommandStraight)
    MergeFrom(*source);
  }
}

void LocomotionControlCommandStraight::MergeFrom(const LocomotionControlCommandStraight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.LocomotionControlCommandStraight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocomotionControlCommandStraight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.LocomotionControlCommandStraight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocomotionControlCommandStraight::CopyFrom(const LocomotionControlCommandStraight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.LocomotionControlCommandStraight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocomotionControlCommandStraight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void LocomotionControlCommandStraight::Swap(LocomotionControlCommandStraight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocomotionControlCommandStraight::InternalSwap(LocomotionControlCommandStraight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(speed_, other->speed_);
  swap(timeout_, other->timeout_);
}

::google::protobuf::Metadata LocomotionControlCommandStraight::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExcavationControlCommandDigDeep::InitAsDefaultInstance() {
}
class ExcavationControlCommandDigDeep::HasBitSetters {
 public:
  static void set_has_depth(ExcavationControlCommandDigDeep* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExcavationControlCommandDigDeep::kDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExcavationControlCommandDigDeep::ExcavationControlCommandDigDeep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.ExcavationControlCommandDigDeep)
}
ExcavationControlCommandDigDeep::ExcavationControlCommandDigDeep(const ExcavationControlCommandDigDeep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  depth_ = from.depth_;
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.ExcavationControlCommandDigDeep)
}

void ExcavationControlCommandDigDeep::SharedCtor() {
  depth_ = 0;
}

ExcavationControlCommandDigDeep::~ExcavationControlCommandDigDeep() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.ExcavationControlCommandDigDeep)
  SharedDtor();
}

void ExcavationControlCommandDigDeep::SharedDtor() {
}

void ExcavationControlCommandDigDeep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExcavationControlCommandDigDeep& ExcavationControlCommandDigDeep::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExcavationControlCommandDigDeep_messages_2eproto.base);
  return *internal_default_instance();
}


void ExcavationControlCommandDigDeep::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.ExcavationControlCommandDigDeep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  depth_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExcavationControlCommandDigDeep::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExcavationControlCommandDigDeep*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float depth = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_depth(val);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExcavationControlCommandDigDeep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.ExcavationControlCommandDigDeep)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float depth = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_depth(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.ExcavationControlCommandDigDeep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.ExcavationControlCommandDigDeep)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExcavationControlCommandDigDeep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.ExcavationControlCommandDigDeep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float depth = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->depth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.ExcavationControlCommandDigDeep)
}

::google::protobuf::uint8* ExcavationControlCommandDigDeep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.ExcavationControlCommandDigDeep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float depth = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->depth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.ExcavationControlCommandDigDeep)
  return target;
}

size_t ExcavationControlCommandDigDeep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.ExcavationControlCommandDigDeep)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required float depth = 1;
  if (has_depth()) {
    total_size += 1 + 4;
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExcavationControlCommandDigDeep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.ExcavationControlCommandDigDeep)
  GOOGLE_DCHECK_NE(&from, this);
  const ExcavationControlCommandDigDeep* source =
      ::google::protobuf::DynamicCastToGenerated<ExcavationControlCommandDigDeep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.ExcavationControlCommandDigDeep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.ExcavationControlCommandDigDeep)
    MergeFrom(*source);
  }
}

void ExcavationControlCommandDigDeep::MergeFrom(const ExcavationControlCommandDigDeep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.ExcavationControlCommandDigDeep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_depth()) {
    set_depth(from.depth());
  }
}

void ExcavationControlCommandDigDeep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.ExcavationControlCommandDigDeep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExcavationControlCommandDigDeep::CopyFrom(const ExcavationControlCommandDigDeep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.ExcavationControlCommandDigDeep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExcavationControlCommandDigDeep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ExcavationControlCommandDigDeep::Swap(ExcavationControlCommandDigDeep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExcavationControlCommandDigDeep::InternalSwap(ExcavationControlCommandDigDeep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(depth_, other->depth_);
}

::google::protobuf::Metadata ExcavationControlCommandDigDeep::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExcavationControlCommandDigEnd::InitAsDefaultInstance() {
}
class ExcavationControlCommandDigEnd::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExcavationControlCommandDigEnd::ExcavationControlCommandDigEnd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.ExcavationControlCommandDigEnd)
}
ExcavationControlCommandDigEnd::ExcavationControlCommandDigEnd(const ExcavationControlCommandDigEnd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.ExcavationControlCommandDigEnd)
}

void ExcavationControlCommandDigEnd::SharedCtor() {
}

ExcavationControlCommandDigEnd::~ExcavationControlCommandDigEnd() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.ExcavationControlCommandDigEnd)
  SharedDtor();
}

void ExcavationControlCommandDigEnd::SharedDtor() {
}

void ExcavationControlCommandDigEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExcavationControlCommandDigEnd& ExcavationControlCommandDigEnd::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExcavationControlCommandDigEnd_messages_2eproto.base);
  return *internal_default_instance();
}


void ExcavationControlCommandDigEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.ExcavationControlCommandDigEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExcavationControlCommandDigEnd::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExcavationControlCommandDigEnd*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExcavationControlCommandDigEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.ExcavationControlCommandDigEnd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.ExcavationControlCommandDigEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.ExcavationControlCommandDigEnd)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExcavationControlCommandDigEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.ExcavationControlCommandDigEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.ExcavationControlCommandDigEnd)
}

::google::protobuf::uint8* ExcavationControlCommandDigEnd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.ExcavationControlCommandDigEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.ExcavationControlCommandDigEnd)
  return target;
}

size_t ExcavationControlCommandDigEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.ExcavationControlCommandDigEnd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExcavationControlCommandDigEnd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.ExcavationControlCommandDigEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const ExcavationControlCommandDigEnd* source =
      ::google::protobuf::DynamicCastToGenerated<ExcavationControlCommandDigEnd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.ExcavationControlCommandDigEnd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.ExcavationControlCommandDigEnd)
    MergeFrom(*source);
  }
}

void ExcavationControlCommandDigEnd::MergeFrom(const ExcavationControlCommandDigEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.ExcavationControlCommandDigEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ExcavationControlCommandDigEnd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.ExcavationControlCommandDigEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExcavationControlCommandDigEnd::CopyFrom(const ExcavationControlCommandDigEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.ExcavationControlCommandDigEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExcavationControlCommandDigEnd::IsInitialized() const {
  return true;
}

void ExcavationControlCommandDigEnd::Swap(ExcavationControlCommandDigEnd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExcavationControlCommandDigEnd::InternalSwap(ExcavationControlCommandDigEnd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata ExcavationControlCommandDigEnd::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StateSubscribe::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_StateSubscribe_default_instance_._instance.get_mutable()->starttime_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class StateSubscribe::HasBitSetters {
 public:
  static void set_has_replykey(StateSubscribe* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_interval(StateSubscribe* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_locomotion_summary(StateSubscribe* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_locomotion_detailed(StateSubscribe* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_excavation_summary(StateSubscribe* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_excavation_detailed(StateSubscribe* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_deposition_summary(StateSubscribe* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_deposition_detailed(StateSubscribe* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_loc_obs_detailed(StateSubscribe* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& starttime(const StateSubscribe* msg);
  static void set_has_starttime(StateSubscribe* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
StateSubscribe::HasBitSetters::starttime(const StateSubscribe* msg) {
  return *msg->starttime_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StateSubscribe::kReplyKeyFieldNumber;
const int StateSubscribe::kIntervalFieldNumber;
const int StateSubscribe::kLocomotionSummaryFieldNumber;
const int StateSubscribe::kLocomotionDetailedFieldNumber;
const int StateSubscribe::kExcavationSummaryFieldNumber;
const int StateSubscribe::kExcavationDetailedFieldNumber;
const int StateSubscribe::kDepositionSummaryFieldNumber;
const int StateSubscribe::kDepositionDetailedFieldNumber;
const int StateSubscribe::kLocObsDetailedFieldNumber;
const int StateSubscribe::kStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StateSubscribe::StateSubscribe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.StateSubscribe)
}
StateSubscribe::StateSubscribe(const StateSubscribe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  replykey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_replykey()) {
    replykey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replykey_);
  }
  if (from.has_starttime()) {
    starttime_ = new ::com::cwrubotix::glennifer::UnixTime(*from.starttime_);
  } else {
    starttime_ = NULL;
  }
  ::memcpy(&interval_, &from.interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&loc_obs_detailed_) -
    reinterpret_cast<char*>(&interval_)) + sizeof(loc_obs_detailed_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.StateSubscribe)
}

void StateSubscribe::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StateSubscribe_messages_2eproto.base);
  replykey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loc_obs_detailed_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(loc_obs_detailed_));
}

StateSubscribe::~StateSubscribe() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.StateSubscribe)
  SharedDtor();
}

void StateSubscribe::SharedDtor() {
  replykey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete starttime_;
}

void StateSubscribe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateSubscribe& StateSubscribe::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StateSubscribe_messages_2eproto.base);
  return *internal_default_instance();
}


void StateSubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.StateSubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      replykey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(starttime_ != NULL);
      starttime_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&interval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deposition_summary_) -
        reinterpret_cast<char*>(&interval_)) + sizeof(deposition_summary_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&deposition_detailed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&loc_obs_detailed_) -
        reinterpret_cast<char*>(&deposition_detailed_)) + sizeof(loc_obs_detailed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateSubscribe::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StateSubscribe*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required string replyKey = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        ctx->extra_parse_data().SetFieldName("com.cwrubotix.glennifer.StateSubscribe.replyKey");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8Verify;
        ::std::string* str = msg->mutable_replykey();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // required float interval = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_interval(val);
        break;
      }
      // required bool locomotion_summary = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_locomotion_summary(value);
        break;
      }
      // required bool locomotion_detailed = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_locomotion_detailed(value);
        break;
      }
      // required bool excavation_summary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_excavation_summary(value);
        break;
      }
      // required bool excavation_detailed = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_excavation_detailed(value);
        break;
      }
      // required bool deposition_summary = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_deposition_summary(value);
        break;
      }
      // required bool deposition_detailed = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_deposition_detailed(value);
        break;
      }
      // required bool loc_obs_detailed = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_loc_obs_detailed(value);
        break;
      }
      // optional .com.cwrubotix.glennifer.UnixTime startTime = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_starttime();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateSubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.StateSubscribe)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string replyKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replykey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->replykey().data(), static_cast<int>(this->replykey().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.cwrubotix.glennifer.StateSubscribe.replyKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float interval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_interval(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool locomotion_summary = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_locomotion_summary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locomotion_summary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool locomotion_detailed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_locomotion_detailed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locomotion_detailed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool excavation_summary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_excavation_summary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &excavation_summary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool excavation_detailed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_excavation_detailed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &excavation_detailed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool deposition_summary = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_deposition_summary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deposition_summary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool deposition_detailed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_deposition_detailed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deposition_detailed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool loc_obs_detailed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_loc_obs_detailed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loc_obs_detailed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.cwrubotix.glennifer.UnixTime startTime = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_starttime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.StateSubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.StateSubscribe)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateSubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.StateSubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string replyKey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replykey().data(), static_cast<int>(this->replykey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.cwrubotix.glennifer.StateSubscribe.replyKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->replykey(), output);
  }

  // required float interval = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->interval(), output);
  }

  // required bool locomotion_summary = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->locomotion_summary(), output);
  }

  // required bool locomotion_detailed = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->locomotion_detailed(), output);
  }

  // required bool excavation_summary = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->excavation_summary(), output);
  }

  // required bool excavation_detailed = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->excavation_detailed(), output);
  }

  // required bool deposition_summary = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->deposition_summary(), output);
  }

  // required bool deposition_detailed = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->deposition_detailed(), output);
  }

  // required bool loc_obs_detailed = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->loc_obs_detailed(), output);
  }

  // optional .com.cwrubotix.glennifer.UnixTime startTime = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::starttime(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.StateSubscribe)
}

::google::protobuf::uint8* StateSubscribe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.StateSubscribe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string replyKey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replykey().data(), static_cast<int>(this->replykey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.cwrubotix.glennifer.StateSubscribe.replyKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->replykey(), target);
  }

  // required float interval = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->interval(), target);
  }

  // required bool locomotion_summary = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->locomotion_summary(), target);
  }

  // required bool locomotion_detailed = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->locomotion_detailed(), target);
  }

  // required bool excavation_summary = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->excavation_summary(), target);
  }

  // required bool excavation_detailed = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->excavation_detailed(), target);
  }

  // required bool deposition_summary = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->deposition_summary(), target);
  }

  // required bool deposition_detailed = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->deposition_detailed(), target);
  }

  // required bool loc_obs_detailed = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->loc_obs_detailed(), target);
  }

  // optional .com.cwrubotix.glennifer.UnixTime startTime = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::starttime(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.StateSubscribe)
  return target;
}

size_t StateSubscribe::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.StateSubscribe)
  size_t total_size = 0;

  if (has_replykey()) {
    // required string replyKey = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->replykey());
  }

  if (has_interval()) {
    // required float interval = 2;
    total_size += 1 + 4;
  }

  if (has_locomotion_summary()) {
    // required bool locomotion_summary = 3;
    total_size += 1 + 1;
  }

  if (has_locomotion_detailed()) {
    // required bool locomotion_detailed = 4;
    total_size += 1 + 1;
  }

  if (has_excavation_summary()) {
    // required bool excavation_summary = 5;
    total_size += 1 + 1;
  }

  if (has_excavation_detailed()) {
    // required bool excavation_detailed = 6;
    total_size += 1 + 1;
  }

  if (has_deposition_summary()) {
    // required bool deposition_summary = 7;
    total_size += 1 + 1;
  }

  if (has_deposition_detailed()) {
    // required bool deposition_detailed = 8;
    total_size += 1 + 1;
  }

  if (has_loc_obs_detailed()) {
    // required bool loc_obs_detailed = 9;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t StateSubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.StateSubscribe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003fd) ^ 0x000003fd) == 0) {  // All required fields are present.
    // required string replyKey = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->replykey());

    // required float interval = 2;
    total_size += 1 + 4;

    // required bool locomotion_summary = 3;
    total_size += 1 + 1;

    // required bool locomotion_detailed = 4;
    total_size += 1 + 1;

    // required bool excavation_summary = 5;
    total_size += 1 + 1;

    // required bool excavation_detailed = 6;
    total_size += 1 + 1;

    // required bool deposition_summary = 7;
    total_size += 1 + 1;

    // required bool deposition_detailed = 8;
    total_size += 1 + 1;

    // required bool loc_obs_detailed = 9;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.cwrubotix.glennifer.UnixTime startTime = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *starttime_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateSubscribe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.StateSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const StateSubscribe* source =
      ::google::protobuf::DynamicCastToGenerated<StateSubscribe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.StateSubscribe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.StateSubscribe)
    MergeFrom(*source);
  }
}

void StateSubscribe::MergeFrom(const StateSubscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.StateSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      replykey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replykey_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_starttime()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.starttime());
    }
    if (cached_has_bits & 0x00000004u) {
      interval_ = from.interval_;
    }
    if (cached_has_bits & 0x00000008u) {
      locomotion_summary_ = from.locomotion_summary_;
    }
    if (cached_has_bits & 0x00000010u) {
      locomotion_detailed_ = from.locomotion_detailed_;
    }
    if (cached_has_bits & 0x00000020u) {
      excavation_summary_ = from.excavation_summary_;
    }
    if (cached_has_bits & 0x00000040u) {
      excavation_detailed_ = from.excavation_detailed_;
    }
    if (cached_has_bits & 0x00000080u) {
      deposition_summary_ = from.deposition_summary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      deposition_detailed_ = from.deposition_detailed_;
    }
    if (cached_has_bits & 0x00000200u) {
      loc_obs_detailed_ = from.loc_obs_detailed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateSubscribe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.StateSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateSubscribe::CopyFrom(const StateSubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.StateSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateSubscribe::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003fd) != 0x000003fd) return false;
  if (has_starttime()) {
    if (!this->starttime_->IsInitialized()) return false;
  }
  return true;
}

void StateSubscribe::Swap(StateSubscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StateSubscribe::InternalSwap(StateSubscribe* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  replykey_.Swap(&other->replykey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(starttime_, other->starttime_);
  swap(interval_, other->interval_);
  swap(locomotion_summary_, other->locomotion_summary_);
  swap(locomotion_detailed_, other->locomotion_detailed_);
  swap(excavation_summary_, other->excavation_summary_);
  swap(excavation_detailed_, other->excavation_detailed_);
  swap(deposition_summary_, other->deposition_summary_);
  swap(deposition_detailed_, other->deposition_detailed_);
  swap(loc_obs_detailed_, other->loc_obs_detailed_);
}

::google::protobuf::Metadata StateSubscribe::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void State::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_State_default_instance_._instance.get_mutable()->loc_summary_ = const_cast< ::com::cwrubotix::glennifer::LocomotionStateSummary*>(
      ::com::cwrubotix::glennifer::LocomotionStateSummary::internal_default_instance());
  ::com::cwrubotix::glennifer::_State_default_instance_._instance.get_mutable()->loc_detailed_ = const_cast< ::com::cwrubotix::glennifer::LocomotionStateDetailed*>(
      ::com::cwrubotix::glennifer::LocomotionStateDetailed::internal_default_instance());
  ::com::cwrubotix::glennifer::_State_default_instance_._instance.get_mutable()->exc_summary_ = const_cast< ::com::cwrubotix::glennifer::ExcavationStateSummary*>(
      ::com::cwrubotix::glennifer::ExcavationStateSummary::internal_default_instance());
  ::com::cwrubotix::glennifer::_State_default_instance_._instance.get_mutable()->exc_detailed_ = const_cast< ::com::cwrubotix::glennifer::ExcavationStateDetailed*>(
      ::com::cwrubotix::glennifer::ExcavationStateDetailed::internal_default_instance());
  ::com::cwrubotix::glennifer::_State_default_instance_._instance.get_mutable()->dep_summary_ = const_cast< ::com::cwrubotix::glennifer::DepositionStateSummary*>(
      ::com::cwrubotix::glennifer::DepositionStateSummary::internal_default_instance());
  ::com::cwrubotix::glennifer::_State_default_instance_._instance.get_mutable()->dep_detailed_ = const_cast< ::com::cwrubotix::glennifer::DepositionStateDetailed*>(
      ::com::cwrubotix::glennifer::DepositionStateDetailed::internal_default_instance());
  ::com::cwrubotix::glennifer::_State_default_instance_._instance.get_mutable()->loc_obs_detailed_ = const_cast< ::com::cwrubotix::glennifer::LocObsStateDetailed*>(
      ::com::cwrubotix::glennifer::LocObsStateDetailed::internal_default_instance());
  ::com::cwrubotix::glennifer::_State_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class State::HasBitSetters {
 public:
  static const ::com::cwrubotix::glennifer::LocomotionStateSummary& loc_summary(const State* msg);
  static void set_has_loc_summary(State* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::com::cwrubotix::glennifer::LocomotionStateDetailed& loc_detailed(const State* msg);
  static void set_has_loc_detailed(State* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::com::cwrubotix::glennifer::ExcavationStateSummary& exc_summary(const State* msg);
  static void set_has_exc_summary(State* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::com::cwrubotix::glennifer::ExcavationStateDetailed& exc_detailed(const State* msg);
  static void set_has_exc_detailed(State* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::com::cwrubotix::glennifer::DepositionStateSummary& dep_summary(const State* msg);
  static void set_has_dep_summary(State* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::com::cwrubotix::glennifer::DepositionStateDetailed& dep_detailed(const State* msg);
  static void set_has_dep_detailed(State* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static const ::com::cwrubotix::glennifer::LocObsStateDetailed& loc_obs_detailed(const State* msg);
  static void set_has_loc_obs_detailed(State* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const State* msg);
  static void set_has_timestamp(State* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

const ::com::cwrubotix::glennifer::LocomotionStateSummary&
State::HasBitSetters::loc_summary(const State* msg) {
  return *msg->loc_summary_;
}
const ::com::cwrubotix::glennifer::LocomotionStateDetailed&
State::HasBitSetters::loc_detailed(const State* msg) {
  return *msg->loc_detailed_;
}
const ::com::cwrubotix::glennifer::ExcavationStateSummary&
State::HasBitSetters::exc_summary(const State* msg) {
  return *msg->exc_summary_;
}
const ::com::cwrubotix::glennifer::ExcavationStateDetailed&
State::HasBitSetters::exc_detailed(const State* msg) {
  return *msg->exc_detailed_;
}
const ::com::cwrubotix::glennifer::DepositionStateSummary&
State::HasBitSetters::dep_summary(const State* msg) {
  return *msg->dep_summary_;
}
const ::com::cwrubotix::glennifer::DepositionStateDetailed&
State::HasBitSetters::dep_detailed(const State* msg) {
  return *msg->dep_detailed_;
}
const ::com::cwrubotix::glennifer::LocObsStateDetailed&
State::HasBitSetters::loc_obs_detailed(const State* msg) {
  return *msg->loc_obs_detailed_;
}
const ::com::cwrubotix::glennifer::UnixTime&
State::HasBitSetters::timestamp(const State* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int State::kLocSummaryFieldNumber;
const int State::kLocDetailedFieldNumber;
const int State::kExcSummaryFieldNumber;
const int State::kExcDetailedFieldNumber;
const int State::kDepSummaryFieldNumber;
const int State::kDepDetailedFieldNumber;
const int State::kLocObsDetailedFieldNumber;
const int State::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

State::State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.State)
}
State::State(const State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_loc_summary()) {
    loc_summary_ = new ::com::cwrubotix::glennifer::LocomotionStateSummary(*from.loc_summary_);
  } else {
    loc_summary_ = NULL;
  }
  if (from.has_loc_detailed()) {
    loc_detailed_ = new ::com::cwrubotix::glennifer::LocomotionStateDetailed(*from.loc_detailed_);
  } else {
    loc_detailed_ = NULL;
  }
  if (from.has_exc_summary()) {
    exc_summary_ = new ::com::cwrubotix::glennifer::ExcavationStateSummary(*from.exc_summary_);
  } else {
    exc_summary_ = NULL;
  }
  if (from.has_exc_detailed()) {
    exc_detailed_ = new ::com::cwrubotix::glennifer::ExcavationStateDetailed(*from.exc_detailed_);
  } else {
    exc_detailed_ = NULL;
  }
  if (from.has_dep_summary()) {
    dep_summary_ = new ::com::cwrubotix::glennifer::DepositionStateSummary(*from.dep_summary_);
  } else {
    dep_summary_ = NULL;
  }
  if (from.has_dep_detailed()) {
    dep_detailed_ = new ::com::cwrubotix::glennifer::DepositionStateDetailed(*from.dep_detailed_);
  } else {
    dep_detailed_ = NULL;
  }
  if (from.has_loc_obs_detailed()) {
    loc_obs_detailed_ = new ::com::cwrubotix::glennifer::LocObsStateDetailed(*from.loc_obs_detailed_);
  } else {
    loc_obs_detailed_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.State)
}

void State::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_State_messages_2eproto.base);
  ::memset(&loc_summary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&loc_summary_)) + sizeof(timestamp_));
}

State::~State() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.State)
  SharedDtor();
}

void State::SharedDtor() {
  if (this != internal_default_instance()) delete loc_summary_;
  if (this != internal_default_instance()) delete loc_detailed_;
  if (this != internal_default_instance()) delete exc_summary_;
  if (this != internal_default_instance()) delete exc_detailed_;
  if (this != internal_default_instance()) delete dep_summary_;
  if (this != internal_default_instance()) delete dep_detailed_;
  if (this != internal_default_instance()) delete loc_obs_detailed_;
  if (this != internal_default_instance()) delete timestamp_;
}

void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const State& State::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_State_messages_2eproto.base);
  return *internal_default_instance();
}


void State::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(loc_summary_ != NULL);
      loc_summary_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(loc_detailed_ != NULL);
      loc_detailed_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(exc_summary_ != NULL);
      exc_summary_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(exc_detailed_ != NULL);
      exc_detailed_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(dep_summary_ != NULL);
      dep_summary_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(dep_detailed_ != NULL);
      dep_detailed_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(loc_obs_detailed_ != NULL);
      loc_obs_detailed_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(timestamp_ != NULL);
      timestamp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* State::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<State*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // optional .com.cwrubotix.glennifer.LocomotionStateSummary loc_summary = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::LocomotionStateSummary::_InternalParse;
        object = msg->mutable_loc_summary();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // optional .com.cwrubotix.glennifer.LocomotionStateDetailed loc_detailed = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::LocomotionStateDetailed::_InternalParse;
        object = msg->mutable_loc_detailed();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // optional .com.cwrubotix.glennifer.ExcavationStateSummary exc_summary = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::ExcavationStateSummary::_InternalParse;
        object = msg->mutable_exc_summary();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // optional .com.cwrubotix.glennifer.ExcavationStateDetailed exc_detailed = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::ExcavationStateDetailed::_InternalParse;
        object = msg->mutable_exc_detailed();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // optional .com.cwrubotix.glennifer.DepositionStateSummary dep_summary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::DepositionStateSummary::_InternalParse;
        object = msg->mutable_dep_summary();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // optional .com.cwrubotix.glennifer.DepositionStateDetailed dep_detailed = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::DepositionStateDetailed::_InternalParse;
        object = msg->mutable_dep_detailed();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // optional .com.cwrubotix.glennifer.LocObsStateDetailed loc_obs_detailed = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::LocObsStateDetailed::_InternalParse;
        object = msg->mutable_loc_obs_detailed();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.State)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.cwrubotix.glennifer.LocomotionStateSummary loc_summary = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_loc_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.cwrubotix.glennifer.LocomotionStateDetailed loc_detailed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_loc_detailed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.cwrubotix.glennifer.ExcavationStateSummary exc_summary = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exc_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.cwrubotix.glennifer.ExcavationStateDetailed exc_detailed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exc_detailed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.cwrubotix.glennifer.DepositionStateSummary dep_summary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dep_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.cwrubotix.glennifer.DepositionStateDetailed dep_detailed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dep_detailed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.cwrubotix.glennifer.LocObsStateDetailed loc_obs_detailed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_loc_obs_detailed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.State)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.cwrubotix.glennifer.LocomotionStateSummary loc_summary = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::loc_summary(this), output);
  }

  // optional .com.cwrubotix.glennifer.LocomotionStateDetailed loc_detailed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::loc_detailed(this), output);
  }

  // optional .com.cwrubotix.glennifer.ExcavationStateSummary exc_summary = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::exc_summary(this), output);
  }

  // optional .com.cwrubotix.glennifer.ExcavationStateDetailed exc_detailed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::exc_detailed(this), output);
  }

  // optional .com.cwrubotix.glennifer.DepositionStateSummary dep_summary = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::dep_summary(this), output);
  }

  // optional .com.cwrubotix.glennifer.DepositionStateDetailed dep_detailed = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::dep_detailed(this), output);
  }

  // optional .com.cwrubotix.glennifer.LocObsStateDetailed loc_obs_detailed = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::loc_obs_detailed(this), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.State)
}

::google::protobuf::uint8* State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.cwrubotix.glennifer.LocomotionStateSummary loc_summary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::loc_summary(this), deterministic, target);
  }

  // optional .com.cwrubotix.glennifer.LocomotionStateDetailed loc_detailed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::loc_detailed(this), deterministic, target);
  }

  // optional .com.cwrubotix.glennifer.ExcavationStateSummary exc_summary = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::exc_summary(this), deterministic, target);
  }

  // optional .com.cwrubotix.glennifer.ExcavationStateDetailed exc_detailed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::exc_detailed(this), deterministic, target);
  }

  // optional .com.cwrubotix.glennifer.DepositionStateSummary dep_summary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::dep_summary(this), deterministic, target);
  }

  // optional .com.cwrubotix.glennifer.DepositionStateDetailed dep_detailed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::dep_detailed(this), deterministic, target);
  }

  // optional .com.cwrubotix.glennifer.LocObsStateDetailed loc_obs_detailed = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::loc_obs_detailed(this), deterministic, target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.State)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .com.cwrubotix.glennifer.UnixTime timestamp = 8;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .com.cwrubotix.glennifer.LocomotionStateSummary loc_summary = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *loc_summary_);
    }

    // optional .com.cwrubotix.glennifer.LocomotionStateDetailed loc_detailed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *loc_detailed_);
    }

    // optional .com.cwrubotix.glennifer.ExcavationStateSummary exc_summary = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *exc_summary_);
    }

    // optional .com.cwrubotix.glennifer.ExcavationStateDetailed exc_detailed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *exc_detailed_);
    }

    // optional .com.cwrubotix.glennifer.DepositionStateSummary dep_summary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dep_summary_);
    }

    // optional .com.cwrubotix.glennifer.DepositionStateDetailed dep_detailed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dep_detailed_);
    }

    // optional .com.cwrubotix.glennifer.LocObsStateDetailed loc_obs_detailed = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *loc_obs_detailed_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::google::protobuf::DynamicCastToGenerated<State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_loc_summary()->::com::cwrubotix::glennifer::LocomotionStateSummary::MergeFrom(from.loc_summary());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_loc_detailed()->::com::cwrubotix::glennifer::LocomotionStateDetailed::MergeFrom(from.loc_detailed());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_exc_summary()->::com::cwrubotix::glennifer::ExcavationStateSummary::MergeFrom(from.exc_summary());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_exc_detailed()->::com::cwrubotix::glennifer::ExcavationStateDetailed::MergeFrom(from.exc_detailed());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_dep_summary()->::com::cwrubotix::glennifer::DepositionStateSummary::MergeFrom(from.dep_summary());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_dep_detailed()->::com::cwrubotix::glennifer::DepositionStateDetailed::MergeFrom(from.dep_detailed());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_loc_obs_detailed()->::com::cwrubotix::glennifer::LocObsStateDetailed::MergeFrom(from.loc_obs_detailed());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
  }
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000080) != 0x00000080) return false;
  if (has_loc_summary()) {
    if (!this->loc_summary_->IsInitialized()) return false;
  }
  if (has_loc_detailed()) {
    if (!this->loc_detailed_->IsInitialized()) return false;
  }
  if (has_exc_summary()) {
    if (!this->exc_summary_->IsInitialized()) return false;
  }
  if (has_exc_detailed()) {
    if (!this->exc_detailed_->IsInitialized()) return false;
  }
  if (has_dep_summary()) {
    if (!this->dep_summary_->IsInitialized()) return false;
  }
  if (has_dep_detailed()) {
    if (!this->dep_detailed_->IsInitialized()) return false;
  }
  if (has_loc_obs_detailed()) {
    if (!this->loc_obs_detailed_->IsInitialized()) return false;
  }
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void State::Swap(State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void State::InternalSwap(State* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(loc_summary_, other->loc_summary_);
  swap(loc_detailed_, other->loc_detailed_);
  swap(exc_summary_, other->exc_summary_);
  swap(exc_detailed_, other->exc_detailed_);
  swap(dep_summary_, other->dep_summary_);
  swap(dep_detailed_, other->dep_detailed_);
  swap(loc_obs_detailed_, other->loc_obs_detailed_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata State::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LocomotionStateSummary::InitAsDefaultInstance() {
}
class LocomotionStateSummary::HasBitSetters {
 public:
  static void set_has_speed(LocomotionStateSummary* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocomotionStateSummary::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocomotionStateSummary::LocomotionStateSummary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.LocomotionStateSummary)
}
LocomotionStateSummary::LocomotionStateSummary(const LocomotionStateSummary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  speed_ = from.speed_;
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.LocomotionStateSummary)
}

void LocomotionStateSummary::SharedCtor() {
  speed_ = 0;
}

LocomotionStateSummary::~LocomotionStateSummary() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.LocomotionStateSummary)
  SharedDtor();
}

void LocomotionStateSummary::SharedDtor() {
}

void LocomotionStateSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocomotionStateSummary& LocomotionStateSummary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LocomotionStateSummary_messages_2eproto.base);
  return *internal_default_instance();
}


void LocomotionStateSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.LocomotionStateSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speed_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocomotionStateSummary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LocomotionStateSummary*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float speed = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_speed(val);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocomotionStateSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.LocomotionStateSummary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float speed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_speed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.LocomotionStateSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.LocomotionStateSummary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocomotionStateSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.LocomotionStateSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float speed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.LocomotionStateSummary)
}

::google::protobuf::uint8* LocomotionStateSummary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.LocomotionStateSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.LocomotionStateSummary)
  return target;
}

size_t LocomotionStateSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.LocomotionStateSummary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required float speed = 1;
  if (has_speed()) {
    total_size += 1 + 4;
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocomotionStateSummary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.LocomotionStateSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const LocomotionStateSummary* source =
      ::google::protobuf::DynamicCastToGenerated<LocomotionStateSummary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.LocomotionStateSummary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.LocomotionStateSummary)
    MergeFrom(*source);
  }
}

void LocomotionStateSummary::MergeFrom(const LocomotionStateSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.LocomotionStateSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_speed()) {
    set_speed(from.speed());
  }
}

void LocomotionStateSummary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.LocomotionStateSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocomotionStateSummary::CopyFrom(const LocomotionStateSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.LocomotionStateSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocomotionStateSummary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LocomotionStateSummary::Swap(LocomotionStateSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocomotionStateSummary::InternalSwap(LocomotionStateSummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(speed_, other->speed_);
}

::google::protobuf::Metadata LocomotionStateSummary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LocomotionStateDetailed::InitAsDefaultInstance() {
}
class LocomotionStateDetailed::HasBitSetters {
 public:
  static void set_has_front_left_rpm(LocomotionStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_front_right_rpm(LocomotionStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_back_left_rpm(LocomotionStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_back_right_rpm(LocomotionStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocomotionStateDetailed::kFrontLeftRpmFieldNumber;
const int LocomotionStateDetailed::kFrontRightRpmFieldNumber;
const int LocomotionStateDetailed::kBackLeftRpmFieldNumber;
const int LocomotionStateDetailed::kBackRightRpmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocomotionStateDetailed::LocomotionStateDetailed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.LocomotionStateDetailed)
}
LocomotionStateDetailed::LocomotionStateDetailed(const LocomotionStateDetailed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&front_left_rpm_, &from.front_left_rpm_,
    static_cast<size_t>(reinterpret_cast<char*>(&back_right_rpm_) -
    reinterpret_cast<char*>(&front_left_rpm_)) + sizeof(back_right_rpm_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.LocomotionStateDetailed)
}

void LocomotionStateDetailed::SharedCtor() {
  ::memset(&front_left_rpm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&back_right_rpm_) -
      reinterpret_cast<char*>(&front_left_rpm_)) + sizeof(back_right_rpm_));
}

LocomotionStateDetailed::~LocomotionStateDetailed() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.LocomotionStateDetailed)
  SharedDtor();
}

void LocomotionStateDetailed::SharedDtor() {
}

void LocomotionStateDetailed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocomotionStateDetailed& LocomotionStateDetailed::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LocomotionStateDetailed_messages_2eproto.base);
  return *internal_default_instance();
}


void LocomotionStateDetailed::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.LocomotionStateDetailed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&front_left_rpm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&back_right_rpm_) -
        reinterpret_cast<char*>(&front_left_rpm_)) + sizeof(back_right_rpm_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocomotionStateDetailed::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LocomotionStateDetailed*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float front_left_rpm = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_front_left_rpm(val);
        break;
      }
      // required float front_right_rpm = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_front_right_rpm(val);
        break;
      }
      // required float back_left_rpm = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_back_left_rpm(val);
        break;
      }
      // required float back_right_rpm = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_back_right_rpm(val);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocomotionStateDetailed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.LocomotionStateDetailed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float front_left_rpm = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_front_left_rpm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &front_left_rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float front_right_rpm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_front_right_rpm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &front_right_rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float back_left_rpm = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_back_left_rpm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &back_left_rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float back_right_rpm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_back_right_rpm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &back_right_rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.LocomotionStateDetailed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.LocomotionStateDetailed)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocomotionStateDetailed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.LocomotionStateDetailed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float front_left_rpm = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->front_left_rpm(), output);
  }

  // required float front_right_rpm = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->front_right_rpm(), output);
  }

  // required float back_left_rpm = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->back_left_rpm(), output);
  }

  // required float back_right_rpm = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->back_right_rpm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.LocomotionStateDetailed)
}

::google::protobuf::uint8* LocomotionStateDetailed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.LocomotionStateDetailed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float front_left_rpm = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->front_left_rpm(), target);
  }

  // required float front_right_rpm = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->front_right_rpm(), target);
  }

  // required float back_left_rpm = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->back_left_rpm(), target);
  }

  // required float back_right_rpm = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->back_right_rpm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.LocomotionStateDetailed)
  return target;
}

size_t LocomotionStateDetailed::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.LocomotionStateDetailed)
  size_t total_size = 0;

  if (has_front_left_rpm()) {
    // required float front_left_rpm = 1;
    total_size += 1 + 4;
  }

  if (has_front_right_rpm()) {
    // required float front_right_rpm = 2;
    total_size += 1 + 4;
  }

  if (has_back_left_rpm()) {
    // required float back_left_rpm = 3;
    total_size += 1 + 4;
  }

  if (has_back_right_rpm()) {
    // required float back_right_rpm = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t LocomotionStateDetailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.LocomotionStateDetailed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float front_left_rpm = 1;
    total_size += 1 + 4;

    // required float front_right_rpm = 2;
    total_size += 1 + 4;

    // required float back_left_rpm = 3;
    total_size += 1 + 4;

    // required float back_right_rpm = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocomotionStateDetailed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.LocomotionStateDetailed)
  GOOGLE_DCHECK_NE(&from, this);
  const LocomotionStateDetailed* source =
      ::google::protobuf::DynamicCastToGenerated<LocomotionStateDetailed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.LocomotionStateDetailed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.LocomotionStateDetailed)
    MergeFrom(*source);
  }
}

void LocomotionStateDetailed::MergeFrom(const LocomotionStateDetailed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.LocomotionStateDetailed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      front_left_rpm_ = from.front_left_rpm_;
    }
    if (cached_has_bits & 0x00000002u) {
      front_right_rpm_ = from.front_right_rpm_;
    }
    if (cached_has_bits & 0x00000004u) {
      back_left_rpm_ = from.back_left_rpm_;
    }
    if (cached_has_bits & 0x00000008u) {
      back_right_rpm_ = from.back_right_rpm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocomotionStateDetailed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.LocomotionStateDetailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocomotionStateDetailed::CopyFrom(const LocomotionStateDetailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.LocomotionStateDetailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocomotionStateDetailed::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void LocomotionStateDetailed::Swap(LocomotionStateDetailed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocomotionStateDetailed::InternalSwap(LocomotionStateDetailed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(front_left_rpm_, other->front_left_rpm_);
  swap(front_right_rpm_, other->front_right_rpm_);
  swap(back_left_rpm_, other->back_left_rpm_);
  swap(back_right_rpm_, other->back_right_rpm_);
}

::google::protobuf::Metadata LocomotionStateDetailed::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExcavationStateSummary::InitAsDefaultInstance() {
}
class ExcavationStateSummary::HasBitSetters {
 public:
  static void set_has_rpm(ExcavationStateSummary* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_displacement(ExcavationStateSummary* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_arm_pos(ExcavationStateSummary* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_current(ExcavationStateSummary* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_arm_extended(ExcavationStateSummary* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_translation_extended(ExcavationStateSummary* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_translation_retracted(ExcavationStateSummary* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExcavationStateSummary::kRpmFieldNumber;
const int ExcavationStateSummary::kDisplacementFieldNumber;
const int ExcavationStateSummary::kArmPosFieldNumber;
const int ExcavationStateSummary::kCurrentFieldNumber;
const int ExcavationStateSummary::kArmExtendedFieldNumber;
const int ExcavationStateSummary::kTranslationExtendedFieldNumber;
const int ExcavationStateSummary::kTranslationRetractedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExcavationStateSummary::ExcavationStateSummary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.ExcavationStateSummary)
}
ExcavationStateSummary::ExcavationStateSummary(const ExcavationStateSummary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rpm_, &from.rpm_,
    static_cast<size_t>(reinterpret_cast<char*>(&translation_retracted_) -
    reinterpret_cast<char*>(&rpm_)) + sizeof(translation_retracted_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.ExcavationStateSummary)
}

void ExcavationStateSummary::SharedCtor() {
  ::memset(&rpm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&translation_retracted_) -
      reinterpret_cast<char*>(&rpm_)) + sizeof(translation_retracted_));
}

ExcavationStateSummary::~ExcavationStateSummary() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.ExcavationStateSummary)
  SharedDtor();
}

void ExcavationStateSummary::SharedDtor() {
}

void ExcavationStateSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExcavationStateSummary& ExcavationStateSummary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExcavationStateSummary_messages_2eproto.base);
  return *internal_default_instance();
}


void ExcavationStateSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.ExcavationStateSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&rpm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&translation_retracted_) -
        reinterpret_cast<char*>(&rpm_)) + sizeof(translation_retracted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExcavationStateSummary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExcavationStateSummary*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float rpm = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_rpm(val);
        break;
      }
      // required float displacement = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_displacement(val);
        break;
      }
      // required float arm_pos = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_arm_pos(val);
        break;
      }
      // required float current = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_current(val);
        break;
      }
      // required bool arm_extended = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_arm_extended(value);
        break;
      }
      // required bool translation_extended = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_translation_extended(value);
        break;
      }
      // required bool translation_retracted = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_translation_retracted(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExcavationStateSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.ExcavationStateSummary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float rpm = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_rpm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float displacement = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_displacement(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &displacement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float arm_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_arm_pos(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &arm_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float current = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_current(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool arm_extended = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_arm_extended(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &arm_extended_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool translation_extended = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_translation_extended(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &translation_extended_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool translation_retracted = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_translation_retracted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &translation_retracted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.ExcavationStateSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.ExcavationStateSummary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExcavationStateSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.ExcavationStateSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float rpm = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->rpm(), output);
  }

  // required float displacement = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->displacement(), output);
  }

  // required float arm_pos = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->arm_pos(), output);
  }

  // required float current = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->current(), output);
  }

  // required bool arm_extended = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->arm_extended(), output);
  }

  // required bool translation_extended = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->translation_extended(), output);
  }

  // required bool translation_retracted = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->translation_retracted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.ExcavationStateSummary)
}

::google::protobuf::uint8* ExcavationStateSummary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.ExcavationStateSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float rpm = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->rpm(), target);
  }

  // required float displacement = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->displacement(), target);
  }

  // required float arm_pos = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->arm_pos(), target);
  }

  // required float current = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->current(), target);
  }

  // required bool arm_extended = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->arm_extended(), target);
  }

  // required bool translation_extended = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->translation_extended(), target);
  }

  // required bool translation_retracted = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->translation_retracted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.ExcavationStateSummary)
  return target;
}

size_t ExcavationStateSummary::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.ExcavationStateSummary)
  size_t total_size = 0;

  if (has_rpm()) {
    // required float rpm = 1;
    total_size += 1 + 4;
  }

  if (has_displacement()) {
    // required float displacement = 2;
    total_size += 1 + 4;
  }

  if (has_arm_pos()) {
    // required float arm_pos = 3;
    total_size += 1 + 4;
  }

  if (has_current()) {
    // required float current = 4;
    total_size += 1 + 4;
  }

  if (has_arm_extended()) {
    // required bool arm_extended = 5;
    total_size += 1 + 1;
  }

  if (has_translation_extended()) {
    // required bool translation_extended = 6;
    total_size += 1 + 1;
  }

  if (has_translation_retracted()) {
    // required bool translation_retracted = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ExcavationStateSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.ExcavationStateSummary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required float rpm = 1;
    total_size += 1 + 4;

    // required float displacement = 2;
    total_size += 1 + 4;

    // required float arm_pos = 3;
    total_size += 1 + 4;

    // required float current = 4;
    total_size += 1 + 4;

    // required bool arm_extended = 5;
    total_size += 1 + 1;

    // required bool translation_extended = 6;
    total_size += 1 + 1;

    // required bool translation_retracted = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExcavationStateSummary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.ExcavationStateSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const ExcavationStateSummary* source =
      ::google::protobuf::DynamicCastToGenerated<ExcavationStateSummary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.ExcavationStateSummary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.ExcavationStateSummary)
    MergeFrom(*source);
  }
}

void ExcavationStateSummary::MergeFrom(const ExcavationStateSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.ExcavationStateSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      rpm_ = from.rpm_;
    }
    if (cached_has_bits & 0x00000002u) {
      displacement_ = from.displacement_;
    }
    if (cached_has_bits & 0x00000004u) {
      arm_pos_ = from.arm_pos_;
    }
    if (cached_has_bits & 0x00000008u) {
      current_ = from.current_;
    }
    if (cached_has_bits & 0x00000010u) {
      arm_extended_ = from.arm_extended_;
    }
    if (cached_has_bits & 0x00000020u) {
      translation_extended_ = from.translation_extended_;
    }
    if (cached_has_bits & 0x00000040u) {
      translation_retracted_ = from.translation_retracted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExcavationStateSummary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.ExcavationStateSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExcavationStateSummary::CopyFrom(const ExcavationStateSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.ExcavationStateSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExcavationStateSummary::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void ExcavationStateSummary::Swap(ExcavationStateSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExcavationStateSummary::InternalSwap(ExcavationStateSummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rpm_, other->rpm_);
  swap(displacement_, other->displacement_);
  swap(arm_pos_, other->arm_pos_);
  swap(current_, other->current_);
  swap(arm_extended_, other->arm_extended_);
  swap(translation_extended_, other->translation_extended_);
  swap(translation_retracted_, other->translation_retracted_);
}

::google::protobuf::Metadata ExcavationStateSummary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExcavationStateDetailed::InitAsDefaultInstance() {
}
class ExcavationStateDetailed::HasBitSetters {
 public:
  static void set_has_rpm(ExcavationStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_displacement(ExcavationStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_arm_pos(ExcavationStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_current(ExcavationStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_arm_left_extended(ExcavationStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_arm_right_extended(ExcavationStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_translation_left_extended(ExcavationStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_translation_right_extended(ExcavationStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_translation_retracted(ExcavationStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExcavationStateDetailed::kRpmFieldNumber;
const int ExcavationStateDetailed::kDisplacementFieldNumber;
const int ExcavationStateDetailed::kArmPosFieldNumber;
const int ExcavationStateDetailed::kCurrentFieldNumber;
const int ExcavationStateDetailed::kArmLeftExtendedFieldNumber;
const int ExcavationStateDetailed::kArmRightExtendedFieldNumber;
const int ExcavationStateDetailed::kTranslationLeftExtendedFieldNumber;
const int ExcavationStateDetailed::kTranslationRightExtendedFieldNumber;
const int ExcavationStateDetailed::kTranslationRetractedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExcavationStateDetailed::ExcavationStateDetailed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.ExcavationStateDetailed)
}
ExcavationStateDetailed::ExcavationStateDetailed(const ExcavationStateDetailed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rpm_, &from.rpm_,
    static_cast<size_t>(reinterpret_cast<char*>(&translation_retracted_) -
    reinterpret_cast<char*>(&rpm_)) + sizeof(translation_retracted_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.ExcavationStateDetailed)
}

void ExcavationStateDetailed::SharedCtor() {
  ::memset(&rpm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&translation_retracted_) -
      reinterpret_cast<char*>(&rpm_)) + sizeof(translation_retracted_));
}

ExcavationStateDetailed::~ExcavationStateDetailed() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.ExcavationStateDetailed)
  SharedDtor();
}

void ExcavationStateDetailed::SharedDtor() {
}

void ExcavationStateDetailed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExcavationStateDetailed& ExcavationStateDetailed::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExcavationStateDetailed_messages_2eproto.base);
  return *internal_default_instance();
}


void ExcavationStateDetailed::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.ExcavationStateDetailed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&rpm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&translation_right_extended_) -
        reinterpret_cast<char*>(&rpm_)) + sizeof(translation_right_extended_));
  }
  translation_retracted_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExcavationStateDetailed::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExcavationStateDetailed*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float rpm = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_rpm(val);
        break;
      }
      // required float displacement = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_displacement(val);
        break;
      }
      // required float arm_pos = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_arm_pos(val);
        break;
      }
      // required float current = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_current(val);
        break;
      }
      // required bool arm_left_extended = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_arm_left_extended(value);
        break;
      }
      // required bool arm_right_extended = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_arm_right_extended(value);
        break;
      }
      // required bool translation_left_extended = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_translation_left_extended(value);
        break;
      }
      // required bool translation_right_extended = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_translation_right_extended(value);
        break;
      }
      // required bool translation_retracted = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_translation_retracted(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExcavationStateDetailed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.ExcavationStateDetailed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float rpm = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_rpm(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float displacement = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_displacement(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &displacement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float arm_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_arm_pos(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &arm_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float current = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_current(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool arm_left_extended = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_arm_left_extended(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &arm_left_extended_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool arm_right_extended = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_arm_right_extended(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &arm_right_extended_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool translation_left_extended = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_translation_left_extended(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &translation_left_extended_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool translation_right_extended = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_translation_right_extended(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &translation_right_extended_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool translation_retracted = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_translation_retracted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &translation_retracted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.ExcavationStateDetailed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.ExcavationStateDetailed)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExcavationStateDetailed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.ExcavationStateDetailed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float rpm = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->rpm(), output);
  }

  // required float displacement = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->displacement(), output);
  }

  // required float arm_pos = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->arm_pos(), output);
  }

  // required float current = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->current(), output);
  }

  // required bool arm_left_extended = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->arm_left_extended(), output);
  }

  // required bool arm_right_extended = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->arm_right_extended(), output);
  }

  // required bool translation_left_extended = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->translation_left_extended(), output);
  }

  // required bool translation_right_extended = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->translation_right_extended(), output);
  }

  // required bool translation_retracted = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->translation_retracted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.ExcavationStateDetailed)
}

::google::protobuf::uint8* ExcavationStateDetailed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.ExcavationStateDetailed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float rpm = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->rpm(), target);
  }

  // required float displacement = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->displacement(), target);
  }

  // required float arm_pos = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->arm_pos(), target);
  }

  // required float current = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->current(), target);
  }

  // required bool arm_left_extended = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->arm_left_extended(), target);
  }

  // required bool arm_right_extended = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->arm_right_extended(), target);
  }

  // required bool translation_left_extended = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->translation_left_extended(), target);
  }

  // required bool translation_right_extended = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->translation_right_extended(), target);
  }

  // required bool translation_retracted = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->translation_retracted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.ExcavationStateDetailed)
  return target;
}

size_t ExcavationStateDetailed::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.ExcavationStateDetailed)
  size_t total_size = 0;

  if (has_rpm()) {
    // required float rpm = 1;
    total_size += 1 + 4;
  }

  if (has_displacement()) {
    // required float displacement = 2;
    total_size += 1 + 4;
  }

  if (has_arm_pos()) {
    // required float arm_pos = 3;
    total_size += 1 + 4;
  }

  if (has_current()) {
    // required float current = 4;
    total_size += 1 + 4;
  }

  if (has_arm_left_extended()) {
    // required bool arm_left_extended = 5;
    total_size += 1 + 1;
  }

  if (has_arm_right_extended()) {
    // required bool arm_right_extended = 6;
    total_size += 1 + 1;
  }

  if (has_translation_left_extended()) {
    // required bool translation_left_extended = 7;
    total_size += 1 + 1;
  }

  if (has_translation_right_extended()) {
    // required bool translation_right_extended = 8;
    total_size += 1 + 1;
  }

  if (has_translation_retracted()) {
    // required bool translation_retracted = 9;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ExcavationStateDetailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.ExcavationStateDetailed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required float rpm = 1;
    total_size += 1 + 4;

    // required float displacement = 2;
    total_size += 1 + 4;

    // required float arm_pos = 3;
    total_size += 1 + 4;

    // required float current = 4;
    total_size += 1 + 4;

    // required bool arm_left_extended = 5;
    total_size += 1 + 1;

    // required bool arm_right_extended = 6;
    total_size += 1 + 1;

    // required bool translation_left_extended = 7;
    total_size += 1 + 1;

    // required bool translation_right_extended = 8;
    total_size += 1 + 1;

    // required bool translation_retracted = 9;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExcavationStateDetailed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.ExcavationStateDetailed)
  GOOGLE_DCHECK_NE(&from, this);
  const ExcavationStateDetailed* source =
      ::google::protobuf::DynamicCastToGenerated<ExcavationStateDetailed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.ExcavationStateDetailed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.ExcavationStateDetailed)
    MergeFrom(*source);
  }
}

void ExcavationStateDetailed::MergeFrom(const ExcavationStateDetailed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.ExcavationStateDetailed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      rpm_ = from.rpm_;
    }
    if (cached_has_bits & 0x00000002u) {
      displacement_ = from.displacement_;
    }
    if (cached_has_bits & 0x00000004u) {
      arm_pos_ = from.arm_pos_;
    }
    if (cached_has_bits & 0x00000008u) {
      current_ = from.current_;
    }
    if (cached_has_bits & 0x00000010u) {
      arm_left_extended_ = from.arm_left_extended_;
    }
    if (cached_has_bits & 0x00000020u) {
      arm_right_extended_ = from.arm_right_extended_;
    }
    if (cached_has_bits & 0x00000040u) {
      translation_left_extended_ = from.translation_left_extended_;
    }
    if (cached_has_bits & 0x00000080u) {
      translation_right_extended_ = from.translation_right_extended_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_translation_retracted(from.translation_retracted());
  }
}

void ExcavationStateDetailed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.ExcavationStateDetailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExcavationStateDetailed::CopyFrom(const ExcavationStateDetailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.ExcavationStateDetailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExcavationStateDetailed::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  return true;
}

void ExcavationStateDetailed::Swap(ExcavationStateDetailed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExcavationStateDetailed::InternalSwap(ExcavationStateDetailed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rpm_, other->rpm_);
  swap(displacement_, other->displacement_);
  swap(arm_pos_, other->arm_pos_);
  swap(current_, other->current_);
  swap(arm_left_extended_, other->arm_left_extended_);
  swap(arm_right_extended_, other->arm_right_extended_);
  swap(translation_left_extended_, other->translation_left_extended_);
  swap(translation_right_extended_, other->translation_right_extended_);
  swap(translation_retracted_, other->translation_retracted_);
}

::google::protobuf::Metadata ExcavationStateDetailed::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DepositionStateSummary::InitAsDefaultInstance() {
}
class DepositionStateSummary::HasBitSetters {
 public:
  static void set_has_load(DepositionStateSummary* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_dump_extended(DepositionStateSummary* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_dump_retracted(DepositionStateSummary* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DepositionStateSummary::kLoadFieldNumber;
const int DepositionStateSummary::kDumpExtendedFieldNumber;
const int DepositionStateSummary::kDumpRetractedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DepositionStateSummary::DepositionStateSummary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.DepositionStateSummary)
}
DepositionStateSummary::DepositionStateSummary(const DepositionStateSummary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&load_, &from.load_,
    static_cast<size_t>(reinterpret_cast<char*>(&dump_retracted_) -
    reinterpret_cast<char*>(&load_)) + sizeof(dump_retracted_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.DepositionStateSummary)
}

void DepositionStateSummary::SharedCtor() {
  ::memset(&load_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dump_retracted_) -
      reinterpret_cast<char*>(&load_)) + sizeof(dump_retracted_));
}

DepositionStateSummary::~DepositionStateSummary() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.DepositionStateSummary)
  SharedDtor();
}

void DepositionStateSummary::SharedDtor() {
}

void DepositionStateSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepositionStateSummary& DepositionStateSummary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DepositionStateSummary_messages_2eproto.base);
  return *internal_default_instance();
}


void DepositionStateSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.DepositionStateSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&load_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dump_retracted_) -
        reinterpret_cast<char*>(&load_)) + sizeof(dump_retracted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DepositionStateSummary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DepositionStateSummary*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float load = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_load(val);
        break;
      }
      // required bool dump_extended = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_dump_extended(value);
        break;
      }
      // required bool dump_retracted = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_dump_retracted(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DepositionStateSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.DepositionStateSummary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float load = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_load(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool dump_extended = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_dump_extended(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dump_extended_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool dump_retracted = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_dump_retracted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dump_retracted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.DepositionStateSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.DepositionStateSummary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DepositionStateSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.DepositionStateSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float load = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->load(), output);
  }

  // required bool dump_extended = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->dump_extended(), output);
  }

  // required bool dump_retracted = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->dump_retracted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.DepositionStateSummary)
}

::google::protobuf::uint8* DepositionStateSummary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.DepositionStateSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float load = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->load(), target);
  }

  // required bool dump_extended = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->dump_extended(), target);
  }

  // required bool dump_retracted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->dump_retracted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.DepositionStateSummary)
  return target;
}

size_t DepositionStateSummary::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.DepositionStateSummary)
  size_t total_size = 0;

  if (has_load()) {
    // required float load = 1;
    total_size += 1 + 4;
  }

  if (has_dump_extended()) {
    // required bool dump_extended = 2;
    total_size += 1 + 1;
  }

  if (has_dump_retracted()) {
    // required bool dump_retracted = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t DepositionStateSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.DepositionStateSummary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float load = 1;
    total_size += 1 + 4;

    // required bool dump_extended = 2;
    total_size += 1 + 1;

    // required bool dump_retracted = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepositionStateSummary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.DepositionStateSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const DepositionStateSummary* source =
      ::google::protobuf::DynamicCastToGenerated<DepositionStateSummary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.DepositionStateSummary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.DepositionStateSummary)
    MergeFrom(*source);
  }
}

void DepositionStateSummary::MergeFrom(const DepositionStateSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.DepositionStateSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      load_ = from.load_;
    }
    if (cached_has_bits & 0x00000002u) {
      dump_extended_ = from.dump_extended_;
    }
    if (cached_has_bits & 0x00000004u) {
      dump_retracted_ = from.dump_retracted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DepositionStateSummary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.DepositionStateSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositionStateSummary::CopyFrom(const DepositionStateSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.DepositionStateSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositionStateSummary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void DepositionStateSummary::Swap(DepositionStateSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepositionStateSummary::InternalSwap(DepositionStateSummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(load_, other->load_);
  swap(dump_extended_, other->dump_extended_);
  swap(dump_retracted_, other->dump_retracted_);
}

::google::protobuf::Metadata DepositionStateSummary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DepositionStateDetailed::InitAsDefaultInstance() {
}
class DepositionStateDetailed::HasBitSetters {
 public:
  static void set_has_left_load(DepositionStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_right_load(DepositionStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_dump_left_extended(DepositionStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_dump_right_extended(DepositionStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_dump_left_retracted(DepositionStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_dump_right_retracted(DepositionStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DepositionStateDetailed::kLeftLoadFieldNumber;
const int DepositionStateDetailed::kRightLoadFieldNumber;
const int DepositionStateDetailed::kDumpLeftExtendedFieldNumber;
const int DepositionStateDetailed::kDumpRightExtendedFieldNumber;
const int DepositionStateDetailed::kDumpLeftRetractedFieldNumber;
const int DepositionStateDetailed::kDumpRightRetractedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DepositionStateDetailed::DepositionStateDetailed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.DepositionStateDetailed)
}
DepositionStateDetailed::DepositionStateDetailed(const DepositionStateDetailed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_load_, &from.left_load_,
    static_cast<size_t>(reinterpret_cast<char*>(&dump_right_retracted_) -
    reinterpret_cast<char*>(&left_load_)) + sizeof(dump_right_retracted_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.DepositionStateDetailed)
}

void DepositionStateDetailed::SharedCtor() {
  ::memset(&left_load_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dump_right_retracted_) -
      reinterpret_cast<char*>(&left_load_)) + sizeof(dump_right_retracted_));
}

DepositionStateDetailed::~DepositionStateDetailed() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.DepositionStateDetailed)
  SharedDtor();
}

void DepositionStateDetailed::SharedDtor() {
}

void DepositionStateDetailed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepositionStateDetailed& DepositionStateDetailed::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DepositionStateDetailed_messages_2eproto.base);
  return *internal_default_instance();
}


void DepositionStateDetailed::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.DepositionStateDetailed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&left_load_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dump_right_retracted_) -
        reinterpret_cast<char*>(&left_load_)) + sizeof(dump_right_retracted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DepositionStateDetailed::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DepositionStateDetailed*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float left_load = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_left_load(val);
        break;
      }
      // required float right_load = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_right_load(val);
        break;
      }
      // required bool dump_left_extended = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_dump_left_extended(value);
        break;
      }
      // required bool dump_right_extended = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_dump_right_extended(value);
        break;
      }
      // required bool dump_left_retracted = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_dump_left_retracted(value);
        break;
      }
      // required bool dump_right_retracted = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_dump_right_retracted(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DepositionStateDetailed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.DepositionStateDetailed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float left_load = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_left_load(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float right_load = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_right_load(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool dump_left_extended = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_dump_left_extended(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dump_left_extended_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool dump_right_extended = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_dump_right_extended(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dump_right_extended_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool dump_left_retracted = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_dump_left_retracted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dump_left_retracted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool dump_right_retracted = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_dump_right_retracted(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dump_right_retracted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.DepositionStateDetailed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.DepositionStateDetailed)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DepositionStateDetailed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.DepositionStateDetailed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float left_load = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left_load(), output);
  }

  // required float right_load = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->right_load(), output);
  }

  // required bool dump_left_extended = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->dump_left_extended(), output);
  }

  // required bool dump_right_extended = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->dump_right_extended(), output);
  }

  // required bool dump_left_retracted = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->dump_left_retracted(), output);
  }

  // required bool dump_right_retracted = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->dump_right_retracted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.DepositionStateDetailed)
}

::google::protobuf::uint8* DepositionStateDetailed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.DepositionStateDetailed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float left_load = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->left_load(), target);
  }

  // required float right_load = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->right_load(), target);
  }

  // required bool dump_left_extended = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->dump_left_extended(), target);
  }

  // required bool dump_right_extended = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->dump_right_extended(), target);
  }

  // required bool dump_left_retracted = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->dump_left_retracted(), target);
  }

  // required bool dump_right_retracted = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->dump_right_retracted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.DepositionStateDetailed)
  return target;
}

size_t DepositionStateDetailed::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.DepositionStateDetailed)
  size_t total_size = 0;

  if (has_left_load()) {
    // required float left_load = 1;
    total_size += 1 + 4;
  }

  if (has_right_load()) {
    // required float right_load = 2;
    total_size += 1 + 4;
  }

  if (has_dump_left_extended()) {
    // required bool dump_left_extended = 3;
    total_size += 1 + 1;
  }

  if (has_dump_right_extended()) {
    // required bool dump_right_extended = 4;
    total_size += 1 + 1;
  }

  if (has_dump_left_retracted()) {
    // required bool dump_left_retracted = 5;
    total_size += 1 + 1;
  }

  if (has_dump_right_retracted()) {
    // required bool dump_right_retracted = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t DepositionStateDetailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.DepositionStateDetailed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required float left_load = 1;
    total_size += 1 + 4;

    // required float right_load = 2;
    total_size += 1 + 4;

    // required bool dump_left_extended = 3;
    total_size += 1 + 1;

    // required bool dump_right_extended = 4;
    total_size += 1 + 1;

    // required bool dump_left_retracted = 5;
    total_size += 1 + 1;

    // required bool dump_right_retracted = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepositionStateDetailed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.DepositionStateDetailed)
  GOOGLE_DCHECK_NE(&from, this);
  const DepositionStateDetailed* source =
      ::google::protobuf::DynamicCastToGenerated<DepositionStateDetailed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.DepositionStateDetailed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.DepositionStateDetailed)
    MergeFrom(*source);
  }
}

void DepositionStateDetailed::MergeFrom(const DepositionStateDetailed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.DepositionStateDetailed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      left_load_ = from.left_load_;
    }
    if (cached_has_bits & 0x00000002u) {
      right_load_ = from.right_load_;
    }
    if (cached_has_bits & 0x00000004u) {
      dump_left_extended_ = from.dump_left_extended_;
    }
    if (cached_has_bits & 0x00000008u) {
      dump_right_extended_ = from.dump_right_extended_;
    }
    if (cached_has_bits & 0x00000010u) {
      dump_left_retracted_ = from.dump_left_retracted_;
    }
    if (cached_has_bits & 0x00000020u) {
      dump_right_retracted_ = from.dump_right_retracted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DepositionStateDetailed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.DepositionStateDetailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositionStateDetailed::CopyFrom(const DepositionStateDetailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.DepositionStateDetailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositionStateDetailed::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void DepositionStateDetailed::Swap(DepositionStateDetailed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepositionStateDetailed::InternalSwap(DepositionStateDetailed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(left_load_, other->left_load_);
  swap(right_load_, other->right_load_);
  swap(dump_left_extended_, other->dump_left_extended_);
  swap(dump_right_extended_, other->dump_right_extended_);
  swap(dump_left_retracted_, other->dump_left_retracted_);
  swap(dump_right_retracted_, other->dump_right_retracted_);
}

::google::protobuf::Metadata DepositionStateDetailed::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LocObsStateDetailed::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_LocObsStateDetailed_default_instance_._instance.get_mutable()->loc_position_ = const_cast< ::com::cwrubotix::glennifer::LocalizationPosition*>(
      ::com::cwrubotix::glennifer::LocalizationPosition::internal_default_instance());
}
class LocObsStateDetailed::HasBitSetters {
 public:
  static const ::com::cwrubotix::glennifer::LocalizationPosition& loc_position(const LocObsStateDetailed* msg);
  static void set_has_loc_position(LocObsStateDetailed* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::LocalizationPosition&
LocObsStateDetailed::HasBitSetters::loc_position(const LocObsStateDetailed* msg) {
  return *msg->loc_position_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocObsStateDetailed::kLocPositionFieldNumber;
const int LocObsStateDetailed::kObstaclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocObsStateDetailed::LocObsStateDetailed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.LocObsStateDetailed)
}
LocObsStateDetailed::LocObsStateDetailed(const LocObsStateDetailed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      obstacles_(from.obstacles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_loc_position()) {
    loc_position_ = new ::com::cwrubotix::glennifer::LocalizationPosition(*from.loc_position_);
  } else {
    loc_position_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.LocObsStateDetailed)
}

void LocObsStateDetailed::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LocObsStateDetailed_messages_2eproto.base);
  loc_position_ = NULL;
}

LocObsStateDetailed::~LocObsStateDetailed() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.LocObsStateDetailed)
  SharedDtor();
}

void LocObsStateDetailed::SharedDtor() {
  if (this != internal_default_instance()) delete loc_position_;
}

void LocObsStateDetailed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocObsStateDetailed& LocObsStateDetailed::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LocObsStateDetailed_messages_2eproto.base);
  return *internal_default_instance();
}


void LocObsStateDetailed::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.LocObsStateDetailed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(loc_position_ != NULL);
    loc_position_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocObsStateDetailed::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LocObsStateDetailed*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required .com.cwrubotix.glennifer.LocalizationPosition loc_position = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::LocalizationPosition::_InternalParse;
        object = msg->mutable_loc_position();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // repeated .com.cwrubotix.glennifer.ObstaclePosition obstacles = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::com::cwrubotix::glennifer::ObstaclePosition::_InternalParse;
          object = msg->add_obstacles();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocObsStateDetailed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.LocObsStateDetailed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.cwrubotix.glennifer.LocalizationPosition loc_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_loc_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.cwrubotix.glennifer.ObstaclePosition obstacles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.LocObsStateDetailed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.LocObsStateDetailed)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocObsStateDetailed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.LocObsStateDetailed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .com.cwrubotix.glennifer.LocalizationPosition loc_position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::loc_position(this), output);
  }

  // repeated .com.cwrubotix.glennifer.ObstaclePosition obstacles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->obstacles(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.LocObsStateDetailed)
}

::google::protobuf::uint8* LocObsStateDetailed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.LocObsStateDetailed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .com.cwrubotix.glennifer.LocalizationPosition loc_position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::loc_position(this), deterministic, target);
  }

  // repeated .com.cwrubotix.glennifer.ObstaclePosition obstacles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->obstacles(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.LocObsStateDetailed)
  return target;
}

size_t LocObsStateDetailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.LocObsStateDetailed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .com.cwrubotix.glennifer.LocalizationPosition loc_position = 1;
  if (has_loc_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *loc_position_);
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.cwrubotix.glennifer.ObstaclePosition obstacles = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->obstacles(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocObsStateDetailed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.LocObsStateDetailed)
  GOOGLE_DCHECK_NE(&from, this);
  const LocObsStateDetailed* source =
      ::google::protobuf::DynamicCastToGenerated<LocObsStateDetailed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.LocObsStateDetailed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.LocObsStateDetailed)
    MergeFrom(*source);
  }
}

void LocObsStateDetailed::MergeFrom(const LocObsStateDetailed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.LocObsStateDetailed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_.MergeFrom(from.obstacles_);
  if (from.has_loc_position()) {
    mutable_loc_position()->::com::cwrubotix::glennifer::LocalizationPosition::MergeFrom(from.loc_position());
  }
}

void LocObsStateDetailed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.LocObsStateDetailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocObsStateDetailed::CopyFrom(const LocObsStateDetailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.LocObsStateDetailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocObsStateDetailed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->obstacles())) return false;
  if (has_loc_position()) {
    if (!this->loc_position_->IsInitialized()) return false;
  }
  return true;
}

void LocObsStateDetailed::Swap(LocObsStateDetailed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocObsStateDetailed::InternalSwap(LocObsStateDetailed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&obstacles_)->InternalSwap(CastToBase(&other->obstacles_));
  swap(loc_position_, other->loc_position_);
}

::google::protobuf::Metadata LocObsStateDetailed::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LocalizationPosition::InitAsDefaultInstance() {
}
class LocalizationPosition::HasBitSetters {
 public:
  static void set_has_x_position(LocalizationPosition* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_y_position(LocalizationPosition* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_bearing_angle(LocalizationPosition* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalizationPosition::kXPositionFieldNumber;
const int LocalizationPosition::kYPositionFieldNumber;
const int LocalizationPosition::kBearingAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalizationPosition::LocalizationPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.LocalizationPosition)
}
LocalizationPosition::LocalizationPosition(const LocalizationPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_position_, &from.x_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&bearing_angle_) -
    reinterpret_cast<char*>(&x_position_)) + sizeof(bearing_angle_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.LocalizationPosition)
}

void LocalizationPosition::SharedCtor() {
  ::memset(&x_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bearing_angle_) -
      reinterpret_cast<char*>(&x_position_)) + sizeof(bearing_angle_));
}

LocalizationPosition::~LocalizationPosition() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.LocalizationPosition)
  SharedDtor();
}

void LocalizationPosition::SharedDtor() {
}

void LocalizationPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalizationPosition& LocalizationPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LocalizationPosition_messages_2eproto.base);
  return *internal_default_instance();
}


void LocalizationPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.LocalizationPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bearing_angle_) -
        reinterpret_cast<char*>(&x_position_)) + sizeof(bearing_angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocalizationPosition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LocalizationPosition*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float x_position = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_x_position(val);
        break;
      }
      // required float y_position = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_y_position(val);
        break;
      }
      // required float bearing_angle = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_bearing_angle(val);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocalizationPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.LocalizationPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_x_position(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y_position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_y_position(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float bearing_angle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_bearing_angle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bearing_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.LocalizationPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.LocalizationPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocalizationPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.LocalizationPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x_position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_position(), output);
  }

  // required float y_position = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_position(), output);
  }

  // required float bearing_angle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bearing_angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.LocalizationPosition)
}

::google::protobuf::uint8* LocalizationPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.LocalizationPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x_position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_position(), target);
  }

  // required float y_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y_position(), target);
  }

  // required float bearing_angle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bearing_angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.LocalizationPosition)
  return target;
}

size_t LocalizationPosition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.LocalizationPosition)
  size_t total_size = 0;

  if (has_x_position()) {
    // required float x_position = 1;
    total_size += 1 + 4;
  }

  if (has_y_position()) {
    // required float y_position = 2;
    total_size += 1 + 4;
  }

  if (has_bearing_angle()) {
    // required float bearing_angle = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t LocalizationPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.LocalizationPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x_position = 1;
    total_size += 1 + 4;

    // required float y_position = 2;
    total_size += 1 + 4;

    // required float bearing_angle = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalizationPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.LocalizationPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationPosition* source =
      ::google::protobuf::DynamicCastToGenerated<LocalizationPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.LocalizationPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.LocalizationPosition)
    MergeFrom(*source);
  }
}

void LocalizationPosition::MergeFrom(const LocalizationPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.LocalizationPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_position_ = from.x_position_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_position_ = from.y_position_;
    }
    if (cached_has_bits & 0x00000004u) {
      bearing_angle_ = from.bearing_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocalizationPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.LocalizationPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationPosition::CopyFrom(const LocalizationPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.LocalizationPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void LocalizationPosition::Swap(LocalizationPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalizationPosition::InternalSwap(LocalizationPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_position_, other->x_position_);
  swap(y_position_, other->y_position_);
  swap(bearing_angle_, other->bearing_angle_);
}

::google::protobuf::Metadata LocalizationPosition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ObstaclePosition::InitAsDefaultInstance() {
}
class ObstaclePosition::HasBitSetters {
 public:
  static void set_has_x_position(ObstaclePosition* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_y_position(ObstaclePosition* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_z_position(ObstaclePosition* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_diameter(ObstaclePosition* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstaclePosition::kXPositionFieldNumber;
const int ObstaclePosition::kYPositionFieldNumber;
const int ObstaclePosition::kZPositionFieldNumber;
const int ObstaclePosition::kDiameterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstaclePosition::ObstaclePosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.ObstaclePosition)
}
ObstaclePosition::ObstaclePosition(const ObstaclePosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_position_, &from.x_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&diameter_) -
    reinterpret_cast<char*>(&x_position_)) + sizeof(diameter_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.ObstaclePosition)
}

void ObstaclePosition::SharedCtor() {
  ::memset(&x_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diameter_) -
      reinterpret_cast<char*>(&x_position_)) + sizeof(diameter_));
}

ObstaclePosition::~ObstaclePosition() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.ObstaclePosition)
  SharedDtor();
}

void ObstaclePosition::SharedDtor() {
}

void ObstaclePosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstaclePosition& ObstaclePosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ObstaclePosition_messages_2eproto.base);
  return *internal_default_instance();
}


void ObstaclePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.ObstaclePosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&diameter_) -
        reinterpret_cast<char*>(&x_position_)) + sizeof(diameter_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObstaclePosition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ObstaclePosition*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float x_position = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_x_position(val);
        break;
      }
      // required float y_position = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_y_position(val);
        break;
      }
      // required float z_position = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_z_position(val);
        break;
      }
      // required float diameter = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_diameter(val);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObstaclePosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.ObstaclePosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_x_position(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y_position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_y_position(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float z_position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_z_position(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float diameter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_diameter(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &diameter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.ObstaclePosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.ObstaclePosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObstaclePosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.ObstaclePosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x_position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_position(), output);
  }

  // required float y_position = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_position(), output);
  }

  // required float z_position = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z_position(), output);
  }

  // required float diameter = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->diameter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.ObstaclePosition)
}

::google::protobuf::uint8* ObstaclePosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.ObstaclePosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x_position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_position(), target);
  }

  // required float y_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y_position(), target);
  }

  // required float z_position = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z_position(), target);
  }

  // required float diameter = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->diameter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.ObstaclePosition)
  return target;
}

size_t ObstaclePosition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.ObstaclePosition)
  size_t total_size = 0;

  if (has_x_position()) {
    // required float x_position = 1;
    total_size += 1 + 4;
  }

  if (has_y_position()) {
    // required float y_position = 2;
    total_size += 1 + 4;
  }

  if (has_z_position()) {
    // required float z_position = 3;
    total_size += 1 + 4;
  }

  if (has_diameter()) {
    // required float diameter = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ObstaclePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.ObstaclePosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x_position = 1;
    total_size += 1 + 4;

    // required float y_position = 2;
    total_size += 1 + 4;

    // required float z_position = 3;
    total_size += 1 + 4;

    // required float diameter = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstaclePosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.ObstaclePosition)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstaclePosition* source =
      ::google::protobuf::DynamicCastToGenerated<ObstaclePosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.ObstaclePosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.ObstaclePosition)
    MergeFrom(*source);
  }
}

void ObstaclePosition::MergeFrom(const ObstaclePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.ObstaclePosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_position_ = from.x_position_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_position_ = from.y_position_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_position_ = from.z_position_;
    }
    if (cached_has_bits & 0x00000008u) {
      diameter_ = from.diameter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstaclePosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.ObstaclePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstaclePosition::CopyFrom(const ObstaclePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.ObstaclePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstaclePosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ObstaclePosition::Swap(ObstaclePosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstaclePosition::InternalSwap(ObstaclePosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_position_, other->x_position_);
  swap(y_position_, other->y_position_);
  swap(z_position_, other->z_position_);
  swap(diameter_, other->diameter_);
}

::google::protobuf::Metadata ObstaclePosition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LaunchTransit::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_LaunchTransit_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class LaunchTransit::HasBitSetters {
 public:
  static void set_has_cur_x_pos(LaunchTransit* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_cur_y_pos(LaunchTransit* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_cur_heading(LaunchTransit* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_dest_x_pos(LaunchTransit* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_dest_y_pos(LaunchTransit* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_time_alloc(LaunchTransit* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const LaunchTransit* msg);
  static void set_has_timestamp(LaunchTransit* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
LaunchTransit::HasBitSetters::timestamp(const LaunchTransit* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaunchTransit::kCurXPosFieldNumber;
const int LaunchTransit::kCurYPosFieldNumber;
const int LaunchTransit::kCurHeadingFieldNumber;
const int LaunchTransit::kDestXPosFieldNumber;
const int LaunchTransit::kDestYPosFieldNumber;
const int LaunchTransit::kTimeAllocFieldNumber;
const int LaunchTransit::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchTransit::LaunchTransit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.LaunchTransit)
}
LaunchTransit::LaunchTransit(const LaunchTransit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  ::memcpy(&cur_x_pos_, &from.cur_x_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_alloc_) -
    reinterpret_cast<char*>(&cur_x_pos_)) + sizeof(time_alloc_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.LaunchTransit)
}

void LaunchTransit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LaunchTransit_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_alloc_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(time_alloc_));
}

LaunchTransit::~LaunchTransit() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.LaunchTransit)
  SharedDtor();
}

void LaunchTransit::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void LaunchTransit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaunchTransit& LaunchTransit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaunchTransit_messages_2eproto.base);
  return *internal_default_instance();
}


void LaunchTransit::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.LaunchTransit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&cur_x_pos_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_alloc_) -
        reinterpret_cast<char*>(&cur_x_pos_)) + sizeof(time_alloc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaunchTransit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LaunchTransit*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float cur_x_pos = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_cur_x_pos(val);
        break;
      }
      // required float cur_y_pos = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_cur_y_pos(val);
        break;
      }
      // required float cur_heading = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_cur_heading(val);
        break;
      }
      // required float dest_x_pos = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_dest_x_pos(val);
        break;
      }
      // required float dest_y_pos = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_dest_y_pos(val);
        break;
      }
      // required float time_alloc = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_time_alloc(val);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaunchTransit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.LaunchTransit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float cur_x_pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_cur_x_pos(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_x_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float cur_y_pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_cur_y_pos(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_y_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float cur_heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_cur_heading(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float dest_x_pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_dest_x_pos(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dest_x_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float dest_y_pos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_dest_y_pos(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dest_y_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float time_alloc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_time_alloc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_alloc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.LaunchTransit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.LaunchTransit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaunchTransit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.LaunchTransit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float cur_x_pos = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->cur_x_pos(), output);
  }

  // required float cur_y_pos = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->cur_y_pos(), output);
  }

  // required float cur_heading = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cur_heading(), output);
  }

  // required float dest_x_pos = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dest_x_pos(), output);
  }

  // required float dest_y_pos = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->dest_y_pos(), output);
  }

  // required float time_alloc = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->time_alloc(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.LaunchTransit)
}

::google::protobuf::uint8* LaunchTransit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.LaunchTransit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float cur_x_pos = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->cur_x_pos(), target);
  }

  // required float cur_y_pos = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->cur_y_pos(), target);
  }

  // required float cur_heading = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cur_heading(), target);
  }

  // required float dest_x_pos = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dest_x_pos(), target);
  }

  // required float dest_y_pos = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->dest_y_pos(), target);
  }

  // required float time_alloc = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->time_alloc(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.LaunchTransit)
  return target;
}

size_t LaunchTransit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.LaunchTransit)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_cur_x_pos()) {
    // required float cur_x_pos = 1;
    total_size += 1 + 4;
  }

  if (has_cur_y_pos()) {
    // required float cur_y_pos = 2;
    total_size += 1 + 4;
  }

  if (has_cur_heading()) {
    // required float cur_heading = 3;
    total_size += 1 + 4;
  }

  if (has_dest_x_pos()) {
    // required float dest_x_pos = 4;
    total_size += 1 + 4;
  }

  if (has_dest_y_pos()) {
    // required float dest_y_pos = 5;
    total_size += 1 + 4;
  }

  if (has_time_alloc()) {
    // required float time_alloc = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t LaunchTransit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.LaunchTransit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required float cur_x_pos = 1;
    total_size += 1 + 4;

    // required float cur_y_pos = 2;
    total_size += 1 + 4;

    // required float cur_heading = 3;
    total_size += 1 + 4;

    // required float dest_x_pos = 4;
    total_size += 1 + 4;

    // required float dest_y_pos = 5;
    total_size += 1 + 4;

    // required float time_alloc = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaunchTransit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.LaunchTransit)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchTransit* source =
      ::google::protobuf::DynamicCastToGenerated<LaunchTransit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.LaunchTransit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.LaunchTransit)
    MergeFrom(*source);
  }
}

void LaunchTransit::MergeFrom(const LaunchTransit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.LaunchTransit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      cur_x_pos_ = from.cur_x_pos_;
    }
    if (cached_has_bits & 0x00000004u) {
      cur_y_pos_ = from.cur_y_pos_;
    }
    if (cached_has_bits & 0x00000008u) {
      cur_heading_ = from.cur_heading_;
    }
    if (cached_has_bits & 0x00000010u) {
      dest_x_pos_ = from.dest_x_pos_;
    }
    if (cached_has_bits & 0x00000020u) {
      dest_y_pos_ = from.dest_y_pos_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_alloc_ = from.time_alloc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaunchTransit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.LaunchTransit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchTransit::CopyFrom(const LaunchTransit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.LaunchTransit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchTransit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void LaunchTransit::Swap(LaunchTransit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchTransit::InternalSwap(LaunchTransit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(cur_x_pos_, other->cur_x_pos_);
  swap(cur_y_pos_, other->cur_y_pos_);
  swap(cur_heading_, other->cur_heading_);
  swap(dest_x_pos_, other->dest_x_pos_);
  swap(dest_y_pos_, other->dest_y_pos_);
  swap(time_alloc_, other->time_alloc_);
}

::google::protobuf::Metadata LaunchTransit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LaunchDrill::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_LaunchDrill_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class LaunchDrill::HasBitSetters {
 public:
  static void set_has_current_x(LaunchDrill* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_current_y(LaunchDrill* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_current_heading(LaunchDrill* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_load_desired(LaunchDrill* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_start(LaunchDrill* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_time_allocation(LaunchDrill* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const LaunchDrill* msg);
  static void set_has_timestamp(LaunchDrill* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
LaunchDrill::HasBitSetters::timestamp(const LaunchDrill* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaunchDrill::kCurrentXFieldNumber;
const int LaunchDrill::kCurrentYFieldNumber;
const int LaunchDrill::kCurrentHeadingFieldNumber;
const int LaunchDrill::kLoadDesiredFieldNumber;
const int LaunchDrill::kStartFieldNumber;
const int LaunchDrill::kTimeAllocationFieldNumber;
const int LaunchDrill::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchDrill::LaunchDrill()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.LaunchDrill)
}
LaunchDrill::LaunchDrill(const LaunchDrill& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  ::memcpy(&current_x_, &from.current_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_allocation_) -
    reinterpret_cast<char*>(&current_x_)) + sizeof(time_allocation_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.LaunchDrill)
}

void LaunchDrill::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LaunchDrill_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_allocation_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(time_allocation_));
}

LaunchDrill::~LaunchDrill() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.LaunchDrill)
  SharedDtor();
}

void LaunchDrill::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void LaunchDrill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaunchDrill& LaunchDrill::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaunchDrill_messages_2eproto.base);
  return *internal_default_instance();
}


void LaunchDrill::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.LaunchDrill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&current_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_allocation_) -
        reinterpret_cast<char*>(&current_x_)) + sizeof(time_allocation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaunchDrill::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LaunchDrill*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float current_x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_current_x(val);
        break;
      }
      // required float current_y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_current_y(val);
        break;
      }
      // required float current_Heading = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_current_heading(val);
        break;
      }
      // required float load_desired = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_load_desired(val);
        break;
      }
      // required bool start = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_start(value);
        break;
      }
      // required float time_allocation = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_time_allocation(val);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaunchDrill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.LaunchDrill)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float current_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_current_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float current_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_current_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float current_Heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_current_heading(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float load_desired = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_load_desired(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &load_desired_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool start = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_start(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float time_allocation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_time_allocation(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_allocation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.LaunchDrill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.LaunchDrill)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaunchDrill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.LaunchDrill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float current_x = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->current_x(), output);
  }

  // required float current_y = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->current_y(), output);
  }

  // required float current_Heading = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->current_heading(), output);
  }

  // required float load_desired = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->load_desired(), output);
  }

  // required bool start = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->start(), output);
  }

  // required float time_allocation = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->time_allocation(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.LaunchDrill)
}

::google::protobuf::uint8* LaunchDrill::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.LaunchDrill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float current_x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->current_x(), target);
  }

  // required float current_y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->current_y(), target);
  }

  // required float current_Heading = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->current_heading(), target);
  }

  // required float load_desired = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->load_desired(), target);
  }

  // required bool start = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->start(), target);
  }

  // required float time_allocation = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->time_allocation(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.LaunchDrill)
  return target;
}

size_t LaunchDrill::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.LaunchDrill)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_current_x()) {
    // required float current_x = 1;
    total_size += 1 + 4;
  }

  if (has_current_y()) {
    // required float current_y = 2;
    total_size += 1 + 4;
  }

  if (has_current_heading()) {
    // required float current_Heading = 3;
    total_size += 1 + 4;
  }

  if (has_load_desired()) {
    // required float load_desired = 4;
    total_size += 1 + 4;
  }

  if (has_start()) {
    // required bool start = 5;
    total_size += 1 + 1;
  }

  if (has_time_allocation()) {
    // required float time_allocation = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t LaunchDrill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.LaunchDrill)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required float current_x = 1;
    total_size += 1 + 4;

    // required float current_y = 2;
    total_size += 1 + 4;

    // required float current_Heading = 3;
    total_size += 1 + 4;

    // required float load_desired = 4;
    total_size += 1 + 4;

    // required bool start = 5;
    total_size += 1 + 1;

    // required float time_allocation = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaunchDrill::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.LaunchDrill)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchDrill* source =
      ::google::protobuf::DynamicCastToGenerated<LaunchDrill>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.LaunchDrill)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.LaunchDrill)
    MergeFrom(*source);
  }
}

void LaunchDrill::MergeFrom(const LaunchDrill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.LaunchDrill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      current_x_ = from.current_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      current_y_ = from.current_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      current_heading_ = from.current_heading_;
    }
    if (cached_has_bits & 0x00000010u) {
      load_desired_ = from.load_desired_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_allocation_ = from.time_allocation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaunchDrill::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.LaunchDrill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchDrill::CopyFrom(const LaunchDrill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.LaunchDrill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchDrill::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void LaunchDrill::Swap(LaunchDrill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchDrill::InternalSwap(LaunchDrill* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(current_x_, other->current_x_);
  swap(current_y_, other->current_y_);
  swap(current_heading_, other->current_heading_);
  swap(load_desired_, other->load_desired_);
  swap(start_, other->start_);
  swap(time_allocation_, other->time_allocation_);
}

::google::protobuf::Metadata LaunchDrill::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LaunchDump::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_LaunchDump_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class LaunchDump::HasBitSetters {
 public:
  static void set_has_current_length(LaunchDump* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_current_angle(LaunchDump* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_start(LaunchDump* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_time_allocation(LaunchDump* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const LaunchDump* msg);
  static void set_has_timestamp(LaunchDump* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
LaunchDump::HasBitSetters::timestamp(const LaunchDump* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaunchDump::kCurrentLengthFieldNumber;
const int LaunchDump::kCurrentAngleFieldNumber;
const int LaunchDump::kStartFieldNumber;
const int LaunchDump::kTimeAllocationFieldNumber;
const int LaunchDump::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchDump::LaunchDump()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.LaunchDump)
}
LaunchDump::LaunchDump(const LaunchDump& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  ::memcpy(&current_length_, &from.current_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_allocation_) -
    reinterpret_cast<char*>(&current_length_)) + sizeof(time_allocation_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.LaunchDump)
}

void LaunchDump::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LaunchDump_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_allocation_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(time_allocation_));
}

LaunchDump::~LaunchDump() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.LaunchDump)
  SharedDtor();
}

void LaunchDump::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void LaunchDump::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaunchDump& LaunchDump::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaunchDump_messages_2eproto.base);
  return *internal_default_instance();
}


void LaunchDump::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.LaunchDump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&current_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_allocation_) -
        reinterpret_cast<char*>(&current_length_)) + sizeof(time_allocation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaunchDump::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LaunchDump*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float current_length = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_current_length(val);
        break;
      }
      // required float current_angle = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_current_angle(val);
        break;
      }
      // required bool start = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_start(value);
        break;
      }
      // required float time_allocation = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_time_allocation(val);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaunchDump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.LaunchDump)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float current_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_current_length(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float current_angle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_current_angle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_start(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float time_allocation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_time_allocation(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_allocation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.LaunchDump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.LaunchDump)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaunchDump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.LaunchDump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float current_length = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->current_length(), output);
  }

  // required float current_angle = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->current_angle(), output);
  }

  // required bool start = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->start(), output);
  }

  // required float time_allocation = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->time_allocation(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.LaunchDump)
}

::google::protobuf::uint8* LaunchDump::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.LaunchDump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float current_length = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->current_length(), target);
  }

  // required float current_angle = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->current_angle(), target);
  }

  // required bool start = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->start(), target);
  }

  // required float time_allocation = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->time_allocation(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.LaunchDump)
  return target;
}

size_t LaunchDump::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.LaunchDump)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_current_length()) {
    // required float current_length = 1;
    total_size += 1 + 4;
  }

  if (has_current_angle()) {
    // required float current_angle = 2;
    total_size += 1 + 4;
  }

  if (has_start()) {
    // required bool start = 3;
    total_size += 1 + 1;
  }

  if (has_time_allocation()) {
    // required float time_allocation = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t LaunchDump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.LaunchDump)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required float current_length = 1;
    total_size += 1 + 4;

    // required float current_angle = 2;
    total_size += 1 + 4;

    // required bool start = 3;
    total_size += 1 + 1;

    // required float time_allocation = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaunchDump::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.LaunchDump)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchDump* source =
      ::google::protobuf::DynamicCastToGenerated<LaunchDump>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.LaunchDump)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.LaunchDump)
    MergeFrom(*source);
  }
}

void LaunchDump::MergeFrom(const LaunchDump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.LaunchDump)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      current_length_ = from.current_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      current_angle_ = from.current_angle_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_allocation_ = from.time_allocation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaunchDump::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.LaunchDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchDump::CopyFrom(const LaunchDump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.LaunchDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchDump::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void LaunchDump::Swap(LaunchDump* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchDump::InternalSwap(LaunchDump* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(current_length_, other->current_length_);
  swap(current_angle_, other->current_angle_);
  swap(start_, other->start_);
  swap(time_allocation_, other->time_allocation_);
}

::google::protobuf::Metadata LaunchDump::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProgressReport::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_ProgressReport_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class ProgressReport::HasBitSetters {
 public:
  static void set_has_done(ProgressReport* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const ProgressReport* msg);
  static void set_has_timestamp(ProgressReport* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
ProgressReport::HasBitSetters::timestamp(const ProgressReport* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProgressReport::kDoneFieldNumber;
const int ProgressReport::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProgressReport::ProgressReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.ProgressReport)
}
ProgressReport::ProgressReport(const ProgressReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  done_ = from.done_;
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.ProgressReport)
}

void ProgressReport::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProgressReport_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&done_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(done_));
}

ProgressReport::~ProgressReport() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.ProgressReport)
  SharedDtor();
}

void ProgressReport::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void ProgressReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProgressReport& ProgressReport::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProgressReport_messages_2eproto.base);
  return *internal_default_instance();
}


void ProgressReport::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.ProgressReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  done_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProgressReport::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProgressReport*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required bool done = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_done(value);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProgressReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.ProgressReport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool done = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_done(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.ProgressReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.ProgressReport)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProgressReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.ProgressReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool done = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->done(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.ProgressReport)
}

::google::protobuf::uint8* ProgressReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.ProgressReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool done = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->done(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.ProgressReport)
  return target;
}

size_t ProgressReport::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.ProgressReport)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_done()) {
    // required bool done = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ProgressReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.ProgressReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required bool done = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProgressReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.ProgressReport)
  GOOGLE_DCHECK_NE(&from, this);
  const ProgressReport* source =
      ::google::protobuf::DynamicCastToGenerated<ProgressReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.ProgressReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.ProgressReport)
    MergeFrom(*source);
  }
}

void ProgressReport::MergeFrom(const ProgressReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.ProgressReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      done_ = from.done_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProgressReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.ProgressReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProgressReport::CopyFrom(const ProgressReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.ProgressReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgressReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void ProgressReport::Swap(ProgressReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProgressReport::InternalSwap(ProgressReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(done_, other->done_);
}

::google::protobuf::Metadata ProgressReport::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ErrorReport::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_ErrorReport_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class ErrorReport::HasBitSetters {
 public:
  static void set_has_resolved(ErrorReport* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const ErrorReport* msg);
  static void set_has_timestamp(ErrorReport* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
ErrorReport::HasBitSetters::timestamp(const ErrorReport* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrorReport::kResolvedFieldNumber;
const int ErrorReport::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrorReport::ErrorReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.ErrorReport)
}
ErrorReport::ErrorReport(const ErrorReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  resolved_ = from.resolved_;
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.ErrorReport)
}

void ErrorReport::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ErrorReport_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resolved_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(resolved_));
}

ErrorReport::~ErrorReport() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.ErrorReport)
  SharedDtor();
}

void ErrorReport::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void ErrorReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorReport& ErrorReport::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ErrorReport_messages_2eproto.base);
  return *internal_default_instance();
}


void ErrorReport::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.ErrorReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  resolved_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ErrorReport::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ErrorReport*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required bool resolved = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_resolved(value);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ErrorReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.ErrorReport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool resolved = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_resolved(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resolved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.ErrorReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.ErrorReport)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ErrorReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.ErrorReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool resolved = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->resolved(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.ErrorReport)
}

::google::protobuf::uint8* ErrorReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.ErrorReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool resolved = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->resolved(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.ErrorReport)
  return target;
}

size_t ErrorReport::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.ErrorReport)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_resolved()) {
    // required bool resolved = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ErrorReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.ErrorReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required bool resolved = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.ErrorReport)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorReport* source =
      ::google::protobuf::DynamicCastToGenerated<ErrorReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.ErrorReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.ErrorReport)
    MergeFrom(*source);
  }
}

void ErrorReport::MergeFrom(const ErrorReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.ErrorReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      resolved_ = from.resolved_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ErrorReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.ErrorReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorReport::CopyFrom(const ErrorReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.ErrorReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void ErrorReport::Swap(ErrorReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrorReport::InternalSwap(ErrorReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(resolved_, other->resolved_);
}

::google::protobuf::Metadata ErrorReport::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransitSoftStop::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_TransitSoftStop_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class TransitSoftStop::HasBitSetters {
 public:
  static void set_has_timeleft(TransitSoftStop* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_stop(TransitSoftStop* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const TransitSoftStop* msg);
  static void set_has_timestamp(TransitSoftStop* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
TransitSoftStop::HasBitSetters::timestamp(const TransitSoftStop* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransitSoftStop::kTimeLeftFieldNumber;
const int TransitSoftStop::kStopFieldNumber;
const int TransitSoftStop::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransitSoftStop::TransitSoftStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.TransitSoftStop)
}
TransitSoftStop::TransitSoftStop(const TransitSoftStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  ::memcpy(&timeleft_, &from.timeleft_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&timeleft_)) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.TransitSoftStop)
}

void TransitSoftStop::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TransitSoftStop_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(stop_));
}

TransitSoftStop::~TransitSoftStop() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.TransitSoftStop)
  SharedDtor();
}

void TransitSoftStop::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void TransitSoftStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransitSoftStop& TransitSoftStop::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransitSoftStop_messages_2eproto.base);
  return *internal_default_instance();
}


void TransitSoftStop::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.TransitSoftStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&timeleft_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stop_) -
        reinterpret_cast<char*>(&timeleft_)) + sizeof(stop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransitSoftStop::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransitSoftStop*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float timeLeft = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_timeleft(val);
        break;
      }
      // required bool stop = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_stop(value);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransitSoftStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.TransitSoftStop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float timeLeft = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_timeleft(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timeleft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool stop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_stop(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.TransitSoftStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.TransitSoftStop)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransitSoftStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.TransitSoftStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float timeLeft = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->timeleft(), output);
  }

  // required bool stop = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stop(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.TransitSoftStop)
}

::google::protobuf::uint8* TransitSoftStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.TransitSoftStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float timeLeft = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->timeleft(), target);
  }

  // required bool stop = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->stop(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.TransitSoftStop)
  return target;
}

size_t TransitSoftStop::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.TransitSoftStop)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_timeleft()) {
    // required float timeLeft = 1;
    total_size += 1 + 4;
  }

  if (has_stop()) {
    // required bool stop = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t TransitSoftStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.TransitSoftStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required float timeLeft = 1;
    total_size += 1 + 4;

    // required bool stop = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransitSoftStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.TransitSoftStop)
  GOOGLE_DCHECK_NE(&from, this);
  const TransitSoftStop* source =
      ::google::protobuf::DynamicCastToGenerated<TransitSoftStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.TransitSoftStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.TransitSoftStop)
    MergeFrom(*source);
  }
}

void TransitSoftStop::MergeFrom(const TransitSoftStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.TransitSoftStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      timeleft_ = from.timeleft_;
    }
    if (cached_has_bits & 0x00000004u) {
      stop_ = from.stop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransitSoftStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.TransitSoftStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransitSoftStop::CopyFrom(const TransitSoftStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.TransitSoftStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitSoftStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void TransitSoftStop::Swap(TransitSoftStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransitSoftStop::InternalSwap(TransitSoftStop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(timeleft_, other->timeleft_);
  swap(stop_, other->stop_);
}

::google::protobuf::Metadata TransitSoftStop::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DrillSoftStop::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_DrillSoftStop_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class DrillSoftStop::HasBitSetters {
 public:
  static void set_has_timeleft(DrillSoftStop* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_stop(DrillSoftStop* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const DrillSoftStop* msg);
  static void set_has_timestamp(DrillSoftStop* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
DrillSoftStop::HasBitSetters::timestamp(const DrillSoftStop* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrillSoftStop::kTimeLeftFieldNumber;
const int DrillSoftStop::kStopFieldNumber;
const int DrillSoftStop::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrillSoftStop::DrillSoftStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.DrillSoftStop)
}
DrillSoftStop::DrillSoftStop(const DrillSoftStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  ::memcpy(&timeleft_, &from.timeleft_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&timeleft_)) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.DrillSoftStop)
}

void DrillSoftStop::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DrillSoftStop_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(stop_));
}

DrillSoftStop::~DrillSoftStop() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.DrillSoftStop)
  SharedDtor();
}

void DrillSoftStop::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void DrillSoftStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrillSoftStop& DrillSoftStop::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DrillSoftStop_messages_2eproto.base);
  return *internal_default_instance();
}


void DrillSoftStop::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.DrillSoftStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&timeleft_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stop_) -
        reinterpret_cast<char*>(&timeleft_)) + sizeof(stop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DrillSoftStop::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DrillSoftStop*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float timeLeft = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_timeleft(val);
        break;
      }
      // required bool stop = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_stop(value);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DrillSoftStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.DrillSoftStop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float timeLeft = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_timeleft(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timeleft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool stop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_stop(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.DrillSoftStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.DrillSoftStop)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DrillSoftStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.DrillSoftStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float timeLeft = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->timeleft(), output);
  }

  // required bool stop = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stop(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.DrillSoftStop)
}

::google::protobuf::uint8* DrillSoftStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.DrillSoftStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float timeLeft = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->timeleft(), target);
  }

  // required bool stop = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->stop(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.DrillSoftStop)
  return target;
}

size_t DrillSoftStop::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.DrillSoftStop)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_timeleft()) {
    // required float timeLeft = 1;
    total_size += 1 + 4;
  }

  if (has_stop()) {
    // required bool stop = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t DrillSoftStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.DrillSoftStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required float timeLeft = 1;
    total_size += 1 + 4;

    // required bool stop = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrillSoftStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.DrillSoftStop)
  GOOGLE_DCHECK_NE(&from, this);
  const DrillSoftStop* source =
      ::google::protobuf::DynamicCastToGenerated<DrillSoftStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.DrillSoftStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.DrillSoftStop)
    MergeFrom(*source);
  }
}

void DrillSoftStop::MergeFrom(const DrillSoftStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.DrillSoftStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      timeleft_ = from.timeleft_;
    }
    if (cached_has_bits & 0x00000004u) {
      stop_ = from.stop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DrillSoftStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.DrillSoftStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrillSoftStop::CopyFrom(const DrillSoftStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.DrillSoftStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrillSoftStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void DrillSoftStop::Swap(DrillSoftStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrillSoftStop::InternalSwap(DrillSoftStop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(timeleft_, other->timeleft_);
  swap(stop_, other->stop_);
}

::google::protobuf::Metadata DrillSoftStop::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DumpSoftStop::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_DumpSoftStop_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class DumpSoftStop::HasBitSetters {
 public:
  static void set_has_timeleft(DumpSoftStop* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_stop(DumpSoftStop* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const DumpSoftStop* msg);
  static void set_has_timestamp(DumpSoftStop* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
DumpSoftStop::HasBitSetters::timestamp(const DumpSoftStop* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DumpSoftStop::kTimeLeftFieldNumber;
const int DumpSoftStop::kStopFieldNumber;
const int DumpSoftStop::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DumpSoftStop::DumpSoftStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.DumpSoftStop)
}
DumpSoftStop::DumpSoftStop(const DumpSoftStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  ::memcpy(&timeleft_, &from.timeleft_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&timeleft_)) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.DumpSoftStop)
}

void DumpSoftStop::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DumpSoftStop_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(stop_));
}

DumpSoftStop::~DumpSoftStop() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.DumpSoftStop)
  SharedDtor();
}

void DumpSoftStop::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void DumpSoftStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DumpSoftStop& DumpSoftStop::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DumpSoftStop_messages_2eproto.base);
  return *internal_default_instance();
}


void DumpSoftStop::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.DumpSoftStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&timeleft_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stop_) -
        reinterpret_cast<char*>(&timeleft_)) + sizeof(stop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DumpSoftStop::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DumpSoftStop*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float timeLeft = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_timeleft(val);
        break;
      }
      // required bool stop = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_stop(value);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DumpSoftStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.DumpSoftStop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float timeLeft = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_timeleft(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timeleft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool stop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_stop(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.DumpSoftStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.DumpSoftStop)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DumpSoftStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.DumpSoftStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float timeLeft = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->timeleft(), output);
  }

  // required bool stop = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stop(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.DumpSoftStop)
}

::google::protobuf::uint8* DumpSoftStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.DumpSoftStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float timeLeft = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->timeleft(), target);
  }

  // required bool stop = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->stop(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.DumpSoftStop)
  return target;
}

size_t DumpSoftStop::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.DumpSoftStop)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_timeleft()) {
    // required float timeLeft = 1;
    total_size += 1 + 4;
  }

  if (has_stop()) {
    // required bool stop = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t DumpSoftStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.DumpSoftStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required float timeLeft = 1;
    total_size += 1 + 4;

    // required bool stop = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DumpSoftStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.DumpSoftStop)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpSoftStop* source =
      ::google::protobuf::DynamicCastToGenerated<DumpSoftStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.DumpSoftStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.DumpSoftStop)
    MergeFrom(*source);
  }
}

void DumpSoftStop::MergeFrom(const DumpSoftStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.DumpSoftStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      timeleft_ = from.timeleft_;
    }
    if (cached_has_bits & 0x00000004u) {
      stop_ = from.stop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DumpSoftStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.DumpSoftStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpSoftStop::CopyFrom(const DumpSoftStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.DumpSoftStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpSoftStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void DumpSoftStop::Swap(DumpSoftStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DumpSoftStop::InternalSwap(DumpSoftStop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(timeleft_, other->timeleft_);
  swap(stop_, other->stop_);
}

::google::protobuf::Metadata DumpSoftStop::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransitHardStop::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_TransitHardStop_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class TransitHardStop::HasBitSetters {
 public:
  static void set_has_stop(TransitHardStop* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const TransitHardStop* msg);
  static void set_has_timestamp(TransitHardStop* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
TransitHardStop::HasBitSetters::timestamp(const TransitHardStop* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransitHardStop::kStopFieldNumber;
const int TransitHardStop::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransitHardStop::TransitHardStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.TransitHardStop)
}
TransitHardStop::TransitHardStop(const TransitHardStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  stop_ = from.stop_;
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.TransitHardStop)
}

void TransitHardStop::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TransitHardStop_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(stop_));
}

TransitHardStop::~TransitHardStop() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.TransitHardStop)
  SharedDtor();
}

void TransitHardStop::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void TransitHardStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransitHardStop& TransitHardStop::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransitHardStop_messages_2eproto.base);
  return *internal_default_instance();
}


void TransitHardStop::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.TransitHardStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  stop_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransitHardStop::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransitHardStop*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required bool stop = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_stop(value);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransitHardStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.TransitHardStop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool stop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_stop(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.TransitHardStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.TransitHardStop)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransitHardStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.TransitHardStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool stop = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->stop(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.TransitHardStop)
}

::google::protobuf::uint8* TransitHardStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.TransitHardStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool stop = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->stop(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.TransitHardStop)
  return target;
}

size_t TransitHardStop::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.TransitHardStop)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_stop()) {
    // required bool stop = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t TransitHardStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.TransitHardStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required bool stop = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransitHardStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.TransitHardStop)
  GOOGLE_DCHECK_NE(&from, this);
  const TransitHardStop* source =
      ::google::protobuf::DynamicCastToGenerated<TransitHardStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.TransitHardStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.TransitHardStop)
    MergeFrom(*source);
  }
}

void TransitHardStop::MergeFrom(const TransitHardStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.TransitHardStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      stop_ = from.stop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransitHardStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.TransitHardStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransitHardStop::CopyFrom(const TransitHardStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.TransitHardStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitHardStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void TransitHardStop::Swap(TransitHardStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransitHardStop::InternalSwap(TransitHardStop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(stop_, other->stop_);
}

::google::protobuf::Metadata TransitHardStop::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DrillHardStop::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_DrillHardStop_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class DrillHardStop::HasBitSetters {
 public:
  static void set_has_stop(DrillHardStop* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const DrillHardStop* msg);
  static void set_has_timestamp(DrillHardStop* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
DrillHardStop::HasBitSetters::timestamp(const DrillHardStop* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrillHardStop::kStopFieldNumber;
const int DrillHardStop::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrillHardStop::DrillHardStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.DrillHardStop)
}
DrillHardStop::DrillHardStop(const DrillHardStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  stop_ = from.stop_;
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.DrillHardStop)
}

void DrillHardStop::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DrillHardStop_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(stop_));
}

DrillHardStop::~DrillHardStop() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.DrillHardStop)
  SharedDtor();
}

void DrillHardStop::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void DrillHardStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrillHardStop& DrillHardStop::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DrillHardStop_messages_2eproto.base);
  return *internal_default_instance();
}


void DrillHardStop::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.DrillHardStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  stop_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DrillHardStop::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DrillHardStop*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required bool stop = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_stop(value);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DrillHardStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.DrillHardStop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool stop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_stop(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.DrillHardStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.DrillHardStop)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DrillHardStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.DrillHardStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool stop = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->stop(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.DrillHardStop)
}

::google::protobuf::uint8* DrillHardStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.DrillHardStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool stop = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->stop(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.DrillHardStop)
  return target;
}

size_t DrillHardStop::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.DrillHardStop)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_stop()) {
    // required bool stop = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t DrillHardStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.DrillHardStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required bool stop = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrillHardStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.DrillHardStop)
  GOOGLE_DCHECK_NE(&from, this);
  const DrillHardStop* source =
      ::google::protobuf::DynamicCastToGenerated<DrillHardStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.DrillHardStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.DrillHardStop)
    MergeFrom(*source);
  }
}

void DrillHardStop::MergeFrom(const DrillHardStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.DrillHardStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      stop_ = from.stop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DrillHardStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.DrillHardStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrillHardStop::CopyFrom(const DrillHardStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.DrillHardStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrillHardStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void DrillHardStop::Swap(DrillHardStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrillHardStop::InternalSwap(DrillHardStop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(stop_, other->stop_);
}

::google::protobuf::Metadata DrillHardStop::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DumpHardStop::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_DumpHardStop_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class DumpHardStop::HasBitSetters {
 public:
  static void set_has_stop(DumpHardStop* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const DumpHardStop* msg);
  static void set_has_timestamp(DumpHardStop* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
DumpHardStop::HasBitSetters::timestamp(const DumpHardStop* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DumpHardStop::kStopFieldNumber;
const int DumpHardStop::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DumpHardStop::DumpHardStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.DumpHardStop)
}
DumpHardStop::DumpHardStop(const DumpHardStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  stop_ = from.stop_;
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.DumpHardStop)
}

void DumpHardStop::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DumpHardStop_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(stop_));
}

DumpHardStop::~DumpHardStop() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.DumpHardStop)
  SharedDtor();
}

void DumpHardStop::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void DumpHardStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DumpHardStop& DumpHardStop::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DumpHardStop_messages_2eproto.base);
  return *internal_default_instance();
}


void DumpHardStop::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.DumpHardStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  stop_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DumpHardStop::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DumpHardStop*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required bool stop = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_stop(value);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DumpHardStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.DumpHardStop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool stop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_stop(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.DumpHardStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.DumpHardStop)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DumpHardStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.DumpHardStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool stop = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->stop(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.DumpHardStop)
}

::google::protobuf::uint8* DumpHardStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.DumpHardStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool stop = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->stop(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.DumpHardStop)
  return target;
}

size_t DumpHardStop::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.DumpHardStop)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_stop()) {
    // required bool stop = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t DumpHardStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.DumpHardStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required bool stop = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DumpHardStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.DumpHardStop)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpHardStop* source =
      ::google::protobuf::DynamicCastToGenerated<DumpHardStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.DumpHardStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.DumpHardStop)
    MergeFrom(*source);
  }
}

void DumpHardStop::MergeFrom(const DumpHardStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.DumpHardStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      stop_ = from.stop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DumpHardStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.DumpHardStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpHardStop::CopyFrom(const DumpHardStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.DumpHardStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpHardStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void DumpHardStop::Swap(DumpHardStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DumpHardStop::InternalSwap(DumpHardStop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(stop_, other->stop_);
}

::google::protobuf::Metadata DumpHardStop::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransitNewObstacle::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_TransitNewObstacle_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class TransitNewObstacle::HasBitSetters {
 public:
  static void set_has_x_pos(TransitNewObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_y_pos(TransitNewObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_diameter(TransitNewObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const TransitNewObstacle* msg);
  static void set_has_timestamp(TransitNewObstacle* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
TransitNewObstacle::HasBitSetters::timestamp(const TransitNewObstacle* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransitNewObstacle::kXPosFieldNumber;
const int TransitNewObstacle::kYPosFieldNumber;
const int TransitNewObstacle::kDiameterFieldNumber;
const int TransitNewObstacle::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransitNewObstacle::TransitNewObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.TransitNewObstacle)
}
TransitNewObstacle::TransitNewObstacle(const TransitNewObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  ::memcpy(&x_pos_, &from.x_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&diameter_) -
    reinterpret_cast<char*>(&x_pos_)) + sizeof(diameter_));
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.TransitNewObstacle)
}

void TransitNewObstacle::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TransitNewObstacle_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diameter_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(diameter_));
}

TransitNewObstacle::~TransitNewObstacle() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.TransitNewObstacle)
  SharedDtor();
}

void TransitNewObstacle::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void TransitNewObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransitNewObstacle& TransitNewObstacle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransitNewObstacle_messages_2eproto.base);
  return *internal_default_instance();
}


void TransitNewObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.TransitNewObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&x_pos_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&diameter_) -
        reinterpret_cast<char*>(&x_pos_)) + sizeof(diameter_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransitNewObstacle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransitNewObstacle*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float x_pos = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_x_pos(val);
        break;
      }
      // required float y_pos = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_y_pos(val);
        break;
      }
      // required float diameter = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_diameter(val);
        break;
      }
      // required .com.cwrubotix.glennifer.UnixTime timestamp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransitNewObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.TransitNewObstacle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x_pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_x_pos(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y_pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_y_pos(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float diameter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_diameter(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &diameter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .com.cwrubotix.glennifer.UnixTime timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.TransitNewObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.TransitNewObstacle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransitNewObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.TransitNewObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x_pos = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_pos(), output);
  }

  // required float y_pos = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_pos(), output);
  }

  // required float diameter = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->diameter(), output);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.TransitNewObstacle)
}

::google::protobuf::uint8* TransitNewObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.TransitNewObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x_pos = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_pos(), target);
  }

  // required float y_pos = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y_pos(), target);
  }

  // required float diameter = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->diameter(), target);
  }

  // required .com.cwrubotix.glennifer.UnixTime timestamp = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.TransitNewObstacle)
  return target;
}

size_t TransitNewObstacle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.cwrubotix.glennifer.TransitNewObstacle)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (has_x_pos()) {
    // required float x_pos = 1;
    total_size += 1 + 4;
  }

  if (has_y_pos()) {
    // required float y_pos = 2;
    total_size += 1 + 4;
  }

  if (has_diameter()) {
    // required float diameter = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t TransitNewObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.TransitNewObstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .com.cwrubotix.glennifer.UnixTime timestamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);

    // required float x_pos = 1;
    total_size += 1 + 4;

    // required float y_pos = 2;
    total_size += 1 + 4;

    // required float diameter = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransitNewObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.TransitNewObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const TransitNewObstacle* source =
      ::google::protobuf::DynamicCastToGenerated<TransitNewObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.TransitNewObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.TransitNewObstacle)
    MergeFrom(*source);
  }
}

void TransitNewObstacle::MergeFrom(const TransitNewObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.TransitNewObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      x_pos_ = from.x_pos_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_pos_ = from.y_pos_;
    }
    if (cached_has_bits & 0x00000008u) {
      diameter_ = from.diameter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransitNewObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.TransitNewObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransitNewObstacle::CopyFrom(const TransitNewObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.TransitNewObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitNewObstacle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void TransitNewObstacle::Swap(TransitNewObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransitNewObstacle::InternalSwap(TransitNewObstacle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(x_pos_, other->x_pos_);
  swap(y_pos_, other->y_pos_);
  swap(diameter_, other->diameter_);
}

::google::protobuf::Metadata TransitNewObstacle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AutonomyNextHeading::InitAsDefaultInstance() {
  ::com::cwrubotix::glennifer::_AutonomyNextHeading_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::com::cwrubotix::glennifer::UnixTime*>(
      ::com::cwrubotix::glennifer::UnixTime::internal_default_instance());
}
class AutonomyNextHeading::HasBitSetters {
 public:
  static void set_has_heading(AutonomyNextHeading* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::com::cwrubotix::glennifer::UnixTime& timestamp(const AutonomyNextHeading* msg);
  static void set_has_timestamp(AutonomyNextHeading* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::com::cwrubotix::glennifer::UnixTime&
AutonomyNextHeading::HasBitSetters::timestamp(const AutonomyNextHeading* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutonomyNextHeading::kHeadingFieldNumber;
const int AutonomyNextHeading::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutonomyNextHeading::AutonomyNextHeading()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.cwrubotix.glennifer.AutonomyNextHeading)
}
AutonomyNextHeading::AutonomyNextHeading(const AutonomyNextHeading& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::com::cwrubotix::glennifer::UnixTime(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  heading_ = from.heading_;
  // @@protoc_insertion_point(copy_constructor:com.cwrubotix.glennifer.AutonomyNextHeading)
}

void AutonomyNextHeading::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AutonomyNextHeading_messages_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(heading_));
}

AutonomyNextHeading::~AutonomyNextHeading() {
  // @@protoc_insertion_point(destructor:com.cwrubotix.glennifer.AutonomyNextHeading)
  SharedDtor();
}

void AutonomyNextHeading::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void AutonomyNextHeading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutonomyNextHeading& AutonomyNextHeading::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AutonomyNextHeading_messages_2eproto.base);
  return *internal_default_instance();
}


void AutonomyNextHeading::Clear() {
// @@protoc_insertion_point(message_clear_start:com.cwrubotix.glennifer.AutonomyNextHeading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->Clear();
  }
  heading_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutonomyNextHeading::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AutonomyNextHeading*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // required float heading = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_heading(val);
        break;
      }
      // optional .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::com::cwrubotix::glennifer::UnixTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutonomyNextHeading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.cwrubotix.glennifer.AutonomyNextHeading)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float heading = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_heading(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.cwrubotix.glennifer.UnixTime timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.cwrubotix.glennifer.AutonomyNextHeading)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.cwrubotix.glennifer.AutonomyNextHeading)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutonomyNextHeading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.cwrubotix.glennifer.AutonomyNextHeading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float heading = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->heading(), output);
  }

  // optional .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.cwrubotix.glennifer.AutonomyNextHeading)
}

::google::protobuf::uint8* AutonomyNextHeading::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.cwrubotix.glennifer.AutonomyNextHeading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float heading = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->heading(), target);
  }

  // optional .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.cwrubotix.glennifer.AutonomyNextHeading)
  return target;
}

size_t AutonomyNextHeading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.cwrubotix.glennifer.AutonomyNextHeading)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required float heading = 1;
  if (has_heading()) {
    total_size += 1 + 4;
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.cwrubotix.glennifer.UnixTime timestamp = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutonomyNextHeading::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.cwrubotix.glennifer.AutonomyNextHeading)
  GOOGLE_DCHECK_NE(&from, this);
  const AutonomyNextHeading* source =
      ::google::protobuf::DynamicCastToGenerated<AutonomyNextHeading>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.cwrubotix.glennifer.AutonomyNextHeading)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.cwrubotix.glennifer.AutonomyNextHeading)
    MergeFrom(*source);
  }
}

void AutonomyNextHeading::MergeFrom(const AutonomyNextHeading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.cwrubotix.glennifer.AutonomyNextHeading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::com::cwrubotix::glennifer::UnixTime::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      heading_ = from.heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AutonomyNextHeading::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.cwrubotix.glennifer.AutonomyNextHeading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutonomyNextHeading::CopyFrom(const AutonomyNextHeading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.cwrubotix.glennifer.AutonomyNextHeading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutonomyNextHeading::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void AutonomyNextHeading::Swap(AutonomyNextHeading* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutonomyNextHeading::InternalSwap(AutonomyNextHeading* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(heading_, other->heading_);
}

::google::protobuf::Metadata AutonomyNextHeading::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace glennifer
}  // namespace cwrubotix
}  // namespace com
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::UnixTime* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::UnixTime >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::UnixTime >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::RpmUpdate* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::RpmUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::RpmUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::DisplacementUpdate* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::DisplacementUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::DisplacementUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::PositionUpdate* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::PositionUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::PositionUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::CurrentUpdate* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::CurrentUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::CurrentUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::LimitUpdate* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::LimitUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::LimitUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::ImuUpdate* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::ImuUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::ImuUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::LoadUpdate* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::LoadUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::LoadUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::CountUpdate* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::CountUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::CountUpdate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::Fault* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::Fault >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::Fault >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::Adjustment* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::Adjustment >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::Adjustment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::SpeedControlCommand* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::SpeedControlCommand >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::SpeedControlCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::AllWheelsCommand* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::AllWheelsCommand >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::AllWheelsCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::ClosedLoopCommand* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::ClosedLoopCommand >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::ClosedLoopCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::PositionControlCommand* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::PositionControlCommand >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::PositionControlCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::TurnControlCommand* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::TurnControlCommand >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::TurnControlCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::StopAllCommand* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::StopAllCommand >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::StopAllCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::LocomotionControlCommandStraight* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::LocomotionControlCommandStraight >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::LocomotionControlCommandStraight >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::ExcavationControlCommandDigDeep* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::ExcavationControlCommandDigDeep >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::ExcavationControlCommandDigDeep >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::ExcavationControlCommandDigEnd* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::ExcavationControlCommandDigEnd >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::ExcavationControlCommandDigEnd >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::StateSubscribe* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::StateSubscribe >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::StateSubscribe >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::State* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::State >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::State >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::LocomotionStateSummary* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::LocomotionStateSummary >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::LocomotionStateSummary >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::LocomotionStateDetailed* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::LocomotionStateDetailed >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::LocomotionStateDetailed >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::ExcavationStateSummary* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::ExcavationStateSummary >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::ExcavationStateSummary >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::ExcavationStateDetailed* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::ExcavationStateDetailed >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::ExcavationStateDetailed >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::DepositionStateSummary* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::DepositionStateSummary >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::DepositionStateSummary >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::DepositionStateDetailed* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::DepositionStateDetailed >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::DepositionStateDetailed >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::LocObsStateDetailed* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::LocObsStateDetailed >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::LocObsStateDetailed >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::LocalizationPosition* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::LocalizationPosition >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::LocalizationPosition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::ObstaclePosition* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::ObstaclePosition >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::ObstaclePosition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::LaunchTransit* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::LaunchTransit >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::LaunchTransit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::LaunchDrill* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::LaunchDrill >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::LaunchDrill >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::LaunchDump* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::LaunchDump >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::LaunchDump >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::ProgressReport* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::ProgressReport >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::ProgressReport >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::ErrorReport* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::ErrorReport >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::ErrorReport >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::TransitSoftStop* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::TransitSoftStop >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::TransitSoftStop >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::DrillSoftStop* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::DrillSoftStop >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::DrillSoftStop >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::DumpSoftStop* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::DumpSoftStop >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::DumpSoftStop >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::TransitHardStop* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::TransitHardStop >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::TransitHardStop >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::DrillHardStop* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::DrillHardStop >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::DrillHardStop >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::DumpHardStop* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::DumpHardStop >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::DumpHardStop >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::TransitNewObstacle* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::TransitNewObstacle >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::TransitNewObstacle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::com::cwrubotix::glennifer::AutonomyNextHeading* Arena::CreateMaybeMessage< ::com::cwrubotix::glennifer::AutonomyNextHeading >(Arena* arena) {
  return Arena::CreateInternal< ::com::cwrubotix::glennifer::AutonomyNextHeading >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
